{
  "ruleChain": {
    "additionalInfo": {
      "description": "Telemetry, TelemetryPL, DATT"
    },
    "name": "PL Embedded MSG",
    "type": "CORE",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": false,
    "configuration": null,
    "externalId": null
  },
  "metadata": {
    "firstNodeIndex": 9,
    "nodes": [
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 1179,
          "layoutY": 680
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "update ct time",
        "debugMode": false,
        "configuration": {
          "jsScript": "var newmsg={};\nif(msg){\n   newmsg.ct= msg.ct;\n    msgType='POST_TELEMETRY_REQUEST';\n}\nreturn {msg: newmsg, metadata: metadata, msgType: msgType};"
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 856,
          "layoutY": 552
        },
        "type": "org.thingsboard.rule.engine.filter.TbMsgTypeSwitchNode",
        "name": "test telemetry to attribute",
        "debugMode": false,
        "configuration": {
          "version": 0
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": null,
          "layoutX": 1183,
          "layoutY": 554
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgTimeseriesNode",
        "name": "save telemetry",
        "debugMode": false,
        "configuration": {
          "defaultTTL": 0
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": null,
          "layoutX": 211,
          "layoutY": 877
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "DecGTWmsg",
        "debugMode": false,
        "configuration": {
          "jsScript": "//Funzione di decodifica di tutti i messaggi embedded del dispositivo\n//var DecGtw_msg_String=\"telemetryH2O=2021-02-22 18:30:00,1255,1,1,2489,dummy,-57;\";\n//var DecGtw_msg_String=\"telemetry=17:58:30,17.4,39.1,1,3296,0.8,210,0.0,0.0,-18.2,11,0036,14076;\";\n//var EVB1:1;\n//\"MSG\":\"telemetryH2O=2021-02-22 18:30:00,1255,1,1,2489,dummy,-57;\"\n// telemetry_ceng=2021-09-28 10:17:00,6254,3,0319B2A1,-85,-5,20,7D3E,-74,12,33,0,-80;\n// telemetryPL=2022-02-01 09:12:11,11,10,23,5,0,3500,,,,485,0,-69;\n//var attr=0;\nvar T2OS_ref=metadata.shared_T2O_reference;\nvar T2CS_ref=metadata.shared_T2C_reference;\nvar T2OS_perc=metadata.shared_T2O_percent;\nvar T2CS_perc=metadata.shared_T2C_percent;\nvar offset_time=5;\n\nvar output_msg =msg;//output\nvar test_ct=msg.ct;\nvar  DecGtw_msg_String=msg.MSG;\nvar multimsg=DecGtw_msg_String.split(';');\nvar msg={};\nvar newMetadata={};\nnewMetadata.deviceName=metadata.deviceName;\nnewMetadata.deviceType=metadata.deviceType;\n//newMetadata.ts=metadata.ts;\nfor (var i = 0; i < (multimsg.length-1); i++) {\n    \n    //console.log(a[i]);\n    newMetadata[i]=multimsg[i];\n    if(i===0) newMetadata.array0=newMetadata[i];\n    if(i==1) newMetadata.array1=newMetadata[i];\n    msg[i]=DecGTWmsg(multimsg[i]);\n}\n   // newMetadata.data=multimsg;\n\n//var multimsg=msg.MSG.split(';');\n//var msg = DecGTWmsg(multimsg[0]);\n//var msg=DecGTWmsg(DecGtw_msg_String);\n\nmsg=DecGTWmsg(multimsg[0]);\nnewMetadata.index = 0;\nnewMetadata.nrMSG = multimsg.length-1;\n\n\n//var msg=DecGTWmsg(test[1]);\n//extend( output_msg, msg );\n//console.log(output_msg);\n//if (attr==1){ attr=0; return['attributes'];}\n\n\nfunction DecGTWmsg(DecGtw_msg_String){\nvar local_output={};\nlocal_output.MSG=DecGtw_msg_String;\nlocal_output.ct=test_ct;\n\n\nvar telemetry = new RegExp(\"telemetry=\");\nvar telemetry_ceng = new RegExp(\"telemetry_ceng=\");\nvar telemetryPL = new RegExp(\"telemetryPL=\");\nvar DATT = new RegExp(\"DATT:\");\nvar ACLB = new RegExp(\"ACLB:\");\nvar AOTH = new RegExp(\"AOTH:\");\nvar LOGD = new RegExp(\"LOGD:\");\nvar Telemetry_arr; //telemetry splitted\nswitch (true) {\n    case telemetry.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetry, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]; local_output.temperature=Telemetry_arr[1];   local_output.humidity=Telemetry_arr[2]; \n       local_output.out_state=Telemetry_arr[3];\n\t\t   //local_output.Batt=Telemetry_arr[4];\n\t\t   local_output.Batt=Telemetry_arr[6];\n\t\t   local_output.mc=Telemetry_arr[7];\n       //local_output.current=Telemetry_arr[5];     local_output.power=Telemetry_arr[6];    local_output.ax=Telemetry_arr[7];\n       local_output.ay=Telemetry_arr[8];          local_output.az=Telemetry_arr[9];         \n       local_output.sc_pci=Telemetry_arr[10];local_output.sc_ecl=Telemetry_arr[11]; local_output.sc_rssi=Telemetry_arr[12];\n        break;\n    case telemetry_ceng.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetry_ceng, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]; \n\t\t   local_output.EARFCN=Telemetry_arr[1];   \n\t\t   local_output.EARFC_off=Telemetry_arr[2]; \n           local_output.Cell_ID=Telemetry_arr[3];\n\t\t   local_output.RSRP=Telemetry_arr[4];\n\t\t   local_output.RSRQ=Telemetry_arr[5];\n\t\t   local_output.Band=Telemetry_arr[6];\n\t\t   local_output.TAC=Telemetry_arr[7];\n           local_output.RE_RSRP=Telemetry_arr[8];          \n           local_output.SNR=Telemetry_arr[9];         \n           local_output.sc_pci=Telemetry_arr[10];\n           local_output.sc_ecl=Telemetry_arr[11]; \n           local_output.sc_rssi=Telemetry_arr[12];\n        break;     \n    case telemetryPL.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetryPL, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]; \n\t\t   local_output.num_azionamenti_PL=Telemetry_arr[1];  //numero di azionamenti del PL (cicli time2close, time close e time2open) \n\t\t   local_output.T2Oc=Number(Telemetry_arr[2])/10;                // time to open in secondi\n           local_output.T2Cc=Number(Telemetry_arr[3])/10;                // time to close in secondi\n\t\t   local_output.TCc=Number(Telemetry_arr[4])/10;                 // time close in secondi\n\t\t   local_output.PL_state=Number(Telemetry_arr[5]);            // byte in cui è possibile inserire la\n\t\t   // segnalazione di un problema/allarme del sistema PL\n\t\t   local_output.PL_state=(\"00\" + local_output.PL_state).slice(-2)\n\t\t   //local_output.SM_state=String.fromCharCode(local_output.PL_state);\n\t\t   //local_output.SM_state=parseFloat(local_output.PL_state).toFixed(0);\n           //local_output.SM_state = local_output.PL_state.toString(16);\n           //local_output.SM_state = parseInt(local_output.PL_state, 10);\n           //local_output.SM_state = Number(local_output.PL_state);\n           //local_output.SM_state = local_output.SM_state.toString(16).substr(0,1);\n           local_output.SM_state = local_output.PL_state.substr(0,1);\n           //local_output.error_state = Number(local_output.PL_state);\n           //local_output.error_state = local_output.error_state.toString(16).substr(1,1);\n           local_output.error_state = local_output.PL_state.substr(1,1);\n\t\t   local_output.Batt=Telemetry_arr[6];\n\t\t   local_output.x_acc=Telemetry_arr[7];               // x_acc\n           local_output.y_acc=Telemetry_arr[8];              // y_acc\n           local_output.z_acc=Telemetry_arr[9];               // z_acc\n           local_output.sc_pci=Telemetry_arr[10];\n           local_output.sc_ecl=Telemetry_arr[11]; \n           local_output.sc_rssi=Telemetry_arr[12];\n            \n           local_output.operational_time = offset_time+local_output.T2Oc+local_output.T2Cc+local_output.TCc;\n\n            if (local_output.error_state === '0') newMetadata.error_type='NO ERROR';\n            if (local_output.error_state === '1') newMetadata.error_type='NO MATCH MODEL';\n            if (local_output.error_state === '2') newMetadata.error_type='T2O/T2C OVER RANGER';\n            if (local_output.error_state === '3') newMetadata.error_type='TC OVER RANGE';\n\n           var pi = Math.PI;\n           var rad = Math.atan(local_output.x_acc/local_output.y_acc);    //nel caso di staffa per PoC Nordcom\n           rad = Math.abs(rad);\n           var angle = rad * (180/pi);\n           local_output.angle=angle;\n           local_output.T2CS_perc=T2CS_perc;\n           local_output.T2OS_perc=T2OS_perc;\n            //F_T2O e F_T2O variabili per calcolare la media \n\t\t   //da fare solo la prima volta appena arriva la telemetria \n\t\t    //if (metadata.F_T2O=== undefined) local_output.F_T2O=local_output.T2Oc;\n\t\t    //if (metadata.F_T2C=== undefined) local_output.F_T2C=local_output.T2Cc;\n\t\t   // Appena saranno disponibili saràpossibile inserirlo nella regola generale di Icon in cui è //previsto prendere il valore di telemetria precedente\n            if (local_output.PL_state === '00'){\n                \n                local_output.Deltaperc_T2O = ((local_output.T2Oc - T2OS_ref)/T2OS_ref)*100;\n                local_output.Deltaperc_T2C = ((local_output.T2Cc - T2CS_ref)/T2CS_ref)*100;\n                \n                \n//                //local_output.F_T2O=(local_output.T2Oc+metadata.F_T2O)/2;\n//                //local_output.F_T2C=(local_output.T2Cc+metadata.F_T2C)/2;\n//                //local_output.F_T2O=Number(metadata.F_T2O);\n//                if (local_output.T2Oc){ \n//                    local_output.F_T2O=(local_output.T2Oc+Number(metadata.F_T2O))/2; \n//                    local_output.Deltaperc_T2O=((local_output.T2Oc-local_output.F_T2O)/local_output.F_T2O)*100;\n//                }\n//                if (local_output.T2Cc){\n//                    local_output.F_T2C=(local_output.T2Cc+Number(metadata.F_T2C))/2;\n//                    local_output.Deltaperc_T2C=((local_output.T2Cc-local_output.F_T2C)/local_output.F_T2C)*100;\n//                }\n            }\n           \n        break;    \n    case DATT.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(DATT, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\n           local_output.model=Telemetry_arr[0];         //modello\n\t\t   local_output.fw=Telemetry_arr[1];            //versione fw\n           local_output.hw=Telemetry_arr[2];            //versione hw\n\t\t   local_output.eeprom=Telemetry_arr[3];        //versione eeprom\n\t\t   local_output.OTAver=Telemetry_arr[4];        //versione fw OTA  \n\t\t   local_output.PL_Calib=Telemetry_arr[5];      // byte in cui è possibile inserire la segnalazione di un problema/allarme del sistema PL \n\t\t   local_output.Xc=Telemetry_arr[6];            //Xc\n\t\t   local_output.Yc=Telemetry_arr[7];            //Yc\n           local_output.Zc=Telemetry_arr[8];            //Zc\n           local_output.Ao_axes=Telemetry_arr[9];       //asse operativo\n           local_output.AoMax=Telemetry_arr[10];        //valore max asse operativo\n           local_output.AoTh=Telemetry_arr[11];         //soglia AoTh\n           local_output.AoTh1=Telemetry_arr[12];        //soglia AoTh1\n           local_output.T2Oc_att=Number(Telemetry_arr[13])/10;     //time to open calib\n           local_output.T2Cc_att=Number(Telemetry_arr[14])/10;     //time to close calib\n//           local_output.TCc_att=Telemetry_arr[15];      //time close calib\n           var d = new Date();\n           var datestring =  d.getFullYear() + \"-\" + (\"0\"+(d.getMonth()+1)).slice(-2) + \"-\" + (\"0\" + d.getDate()).slice(-2) + \" \" + (\"0\" + d.getHours()).slice(-2) + \":\" + (\"0\" + d.getMinutes()).slice(-2) + \":\" + (\"0\" + d.getSeconds()).slice(-2);\n           //console.log(dateTime);\n           \n           local_output.timestamp_Calib=datestring;\n   \n           //var pi1 = Math.PI;\n           var rad1 = Math.atan(local_output.Yc/local_output.Xc);  //nel caso di PL Matera\n//           var rad1 = Math.atan(local_output.Xc/local_output.Yc);    //nel caso di staffa per PoC Nordcom\n           rad1 = Math.abs(rad1);\n           var angle1 = rad1 * (180/Math.PI);\n           local_output.angle=angle1;\n           //attr=1;\n           msgType='POST_ATTRIBUTES_REQUEST';\n        break; \n    case ACLB.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(ACLB, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(';');\n\n           local_output.Calib_state=Telemetry_arr[0];         //Calib_state\n\n        break;     \n    case AOTH.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(AOTH, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\n           local_output.Aoth_Perc=Telemetry_arr[0];         //Aoth_Perc\n\t\t   local_output.Aoth1_Perc=Telemetry_arr[1];        //Aoth1_Perc\n           local_output.Aoth1=Telemetry_arr[2];             //Aoth1\n\t\t   local_output.HG_T2C_IRQ=Telemetry_arr[3];        //HG_T2C_IRQ\n\t\t   local_output.AF2Ao_HG_switch=Telemetry_arr[4];   //AF_2_Ao_HG_switch \n\t\t   local_output.Aoth=Telemetry_arr[5];              //Aoth \n\t       local_output.HG_T2O_IRQ=Telemetry_arr[6];        //HG_T2O_IRQ\n\t\t   local_output.Ao2AF_HG_switch=Telemetry_arr[7];   //Ao_2_AF_HG_switch\n\t\t   local_output.Afth=Telemetry_arr[8];              //Afth\n\t\t   test = Telemetry_arr[9].split(';');\n           local_output.nr_PL_TotNoModel=test[0];               //num_PL_TotNoModel\n//           local_output.T2Oc_att=Number(Telemetry_arr[13])/10;     //time to open calib\n//           local_output.T2Cc_att=Number(Telemetry_arr[14])/10;     //time to close calib\n//myMSG=myMSG.split(';');\n//           msgType='POST_ATTRIBUTES_REQUEST';\n        break; \n    case LOGD.test(DecGtw_msg_String):\n\t\t\t\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(LOGD, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n           offset = 1;\n           //var dateTime = new Date(Telemetry_arr[offset+0]*1000);\n//           newMetadata.ts=Telemetry_arr[offset+0];\n           local_output.ts=Telemetry_arr[offset+0];\n           var m = new Date(Telemetry_arr[offset+0]*1000);\n            var dateString =\n                m.getUTCFullYear() + \"-\" +\n                (\"0\" + (m.getUTCMonth()+1)).slice(-2) + \"-\" +\n                (\"0\" + m.getUTCDate()).slice(-2) + \" \" +\n                (\"0\" + m.getUTCHours()).slice(-2) + \":\" +\n                (\"0\" + m.getUTCMinutes()).slice(-2) + \":\" +\n                (\"0\" + m.getUTCSeconds()).slice(-2);\n           \n//           var formatted = dateTime.toGMTString();\n           //var formatted = dateTime.toISOString();\n           //moment(dateTime).format(\"YYYY-MM-DDTHH:mm:ssZZ\");\n           local_output.timestamp_log=dateString;              //timestamp\n//           local_output.timestamp=Telemetry_arr[offset+0];              //timestamp\n\t\t   local_output.num_azionamenti_PL_log=Telemetry_arr[offset+1];     //num_azionamenti_PL\n           local_output.PL_T2O_time_log=Telemetry_arr[offset+2];            //PL_T2O_time\n\t\t   local_output.PL_T2C_time_log=Telemetry_arr[offset+3];            //PL_T2C_time\n\t\t   local_output.PL_TC_time_log=Telemetry_arr[offset+4];             //PL_TC_time \n\t\t   local_output.PL_state_log=Telemetry_arr[offset+5];               //PL_state \n\t       local_output.PL_T2O_Average_log=Telemetry_arr[offset+6];         //PL_T2O_Average\n\t       local_output.PL_T2C_Average_log=Telemetry_arr[offset+7];         //PL_T2C_Average\n\t\t   local_output.PL_T2O_min_log=Telemetry_arr[offset+8];             //PL_T2O_min\n\t\t   local_output.PL_T2C_min_log=Telemetry_arr[offset+9];             //PL_T2C_min\n\t\t   local_output.PL_T2O_Max_log=Telemetry_arr[offset+10];             //PL_T2O_Max\n\t\t   local_output.PL_T2C_Max_log=Telemetry_arr[offset+11];             //PL_T2C_Max\n\t\t   //test = Telemetry_arr[offset+13].split(';');\n\t\t   //local_output.num_PL_OutOfRange=test[0];             \n\t\t   local_output.num_PL_OutOfRange_log=Telemetry_arr[offset+12];     //Unsuccesfull_OperationPL        //Unsuccesfull_OperationPL\n\n\t\t   local_output.T2CS_perc_log=T2CS_perc;\n           local_output.T2OS_perc_log=T2OS_perc;\n           if (local_output.PL_state_log === '0')\n           {\n                local_output.Deltaperc_T2O_avg_log = ((local_output.PL_T2O_Average_log - T2OS_ref)/T2OS_ref)*100;\n                local_output.Deltaperc_T2C_avg_log = ((local_output.PL_T2C_Average_log - T2CS_ref)/T2CS_ref)*100;\n           }\n\t\t   \n            break;\n        default:\n        break;\n}\n\nreturn local_output;\n}\nreturn {msg: msg, metadata: newMetadata, msgType: msgType};"
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "layoutX": 254,
          "layoutY": 632
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "GET T2OS e T2CS",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [
            "T2C_reference",
            "T2C_percent",
            "T2O_reference",
            "T2O_percent"
          ],
          "serverAttributeNames": [],
          "latestTsKeyNames": []
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": null,
          "layoutX": 594,
          "layoutY": 622
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "DecGTWmsg",
        "debugMode": false,
        "configuration": {
          "jsScript": "//Funzione di decodifica di tutti i messaggi embedded del dispositivo\n//var DecGtw_msg_String=\"telemetryH2O=2021-02-22 18:30:00,1255,1,1,2489,dummy,-57;\";\n//var DecGtw_msg_String=\"telemetry=17:58:30,17.4,39.1,1,3296,0.8,210,0.0,0.0,-18.2,11,0036,14076;\";\n//var EVB1:1;\n//\"MSG\":\"telemetryH2O=2021-02-22 18:30:00,1255,1,1,2489,dummy,-57;\"\n// telemetry_ceng=2021-09-28 10:17:00,6254,3,0319B2A1,-85,-5,20,7D3E,-74,12,33,0,-80;\n// telemetryPL=2022-02-01 09:12:11,11,10,23,5,0,3500,,,,485,0,-69;\n//var attr=0;\nvar T2OS_ref=metadata.shared_T2O_reference;\nvar T2CS_ref=metadata.shared_T2C_reference;\nvar T2OS_perc=metadata.shared_T2O_percent;\nvar T2CS_perc=metadata.shared_T2C_percent;\nvar offset_time=5;\n\nvar output_msg =msg;//output\nvar test_ct=msg.ct;\nvar  DecGtw_msg_String=msg.MSG;\nvar multimsg=DecGtw_msg_String.split(';');\nvar msg={};\n//var msg1={};\n//var msg2={};\n//var msg3={};\nvar newMetadata={};\nvar submsg={};\nvar tempmsg={};\nvar tempjsonmsg={};\nnewMetadata.deviceName=metadata.deviceName;\nnewMetadata.deviceType=metadata.deviceType;\n//newMetadata.ts=metadata.ts;\nvar array=[];\nvar DATT1 = new RegExp(\"DATT:\");\nif(! DATT1.test(DecGtw_msg_String)){\n    for (var i = 0; i < (multimsg.length-1); i++) {\n        \n        //console.log(a[i]);\n    //    newMetadata[i]=multimsg[i];\n    //    if(i===0) newMetadata.array0=newMetadata[i];\n    //    if(i==1) newMetadata.array1=newMetadata[i];\n    \n    \n    //    submsg[i]=DecGTWmsg(multimsg[i]);  \n    //aggiunto replace per togliere EXIT CMD se presente all'inizio del msg\n        submsg[i]=DecGTWmsg(multimsg[i].replace(\"EXIT CMD\\n\",\"\"));\n        tempjsonmsg.ts=submsg[i].ts;tempjsonmsg.values=submsg[i];\n        tempmsg[i]=tempjsonmsg;\n        tempmsg[i]=JSON.stringify(tempmsg[i]);\n        array=array.concat(tempmsg[i]);\n       \n    }\n    msg=JSON.parse('['+array+']');\n}else msg=DecGtw_msg_String;\n\n//newMetadata.index = 0;\n//newMetadata.nrMSG = multimsg.length-1;\n\n\nfunction DecGTWmsg(DecGtw_msg_String){\nvar local_output={};\nlocal_output.MSG=DecGtw_msg_String;\nlocal_output.ct=test_ct;\n\n\nvar telemetry = new RegExp(\"telemetry=\");\nvar telemetry_ceng = new RegExp(\"telemetry_ceng=\");\nvar telemetryPL = new RegExp(\"telemetryPL=\");\nvar DATT = new RegExp(\"DATT:\");\nvar ACLB = new RegExp(\"ACLB:\");\nvar AOTH = new RegExp(\"AOTH:\");\nvar LOGD = new RegExp(\"LOGD:\");\nvar Telemetry_arr; //telemetry splitted\n\nvar d = new Date();\nvar datestring =  d.getFullYear() + \"-\" + (\"0\"+(d.getMonth()+1)).slice(-2) + \"-\" + (\"0\" + d.getDate()).slice(-2) + \" \" + (\"0\" + d.getHours()).slice(-2) + \":\" + (\"0\" + d.getMinutes()).slice(-2) + \":\" + (\"0\" + d.getSeconds()).slice(-2);\n//console.log(dateTime);\n\nswitch (true) {\n    case telemetry.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetry, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]; \n\t\t   local_output.ts=Date.parse(local_output.timestamp);\n\t\t   local_output.temperature=Telemetry_arr[1];   local_output.humidity=Telemetry_arr[2]; \n       local_output.out_state=Telemetry_arr[3];\n\t\t   //local_output.Batt=Telemetry_arr[4];\n\t\t   local_output.Batt=Telemetry_arr[6];\n\t\t   local_output.mc=Telemetry_arr[7];\n       //local_output.current=Telemetry_arr[5];     local_output.power=Telemetry_arr[6];    local_output.ax=Telemetry_arr[7];\n       local_output.ay=Telemetry_arr[8];          local_output.az=Telemetry_arr[9];         \n       local_output.sc_pci=Telemetry_arr[10];local_output.sc_ecl=Telemetry_arr[11]; local_output.sc_rssi=Telemetry_arr[12];\n       \n        break;\n    case telemetry_ceng.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetry_ceng, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]; \n\t\t   local_output.EARFCN=Telemetry_arr[1];   \n\t\t   local_output.EARFC_off=Telemetry_arr[2]; \n           local_output.Cell_ID=Telemetry_arr[3];\n\t\t   local_output.RSRP=Telemetry_arr[4];\n\t\t   local_output.RSRQ=Telemetry_arr[5];\n\t\t   local_output.Band=Telemetry_arr[6];\n\t\t   local_output.TAC=Telemetry_arr[7];\n           local_output.RE_RSRP=Telemetry_arr[8];          \n           local_output.SNR=Telemetry_arr[9];         \n           local_output.sc_pci=Telemetry_arr[10];\n           local_output.sc_ecl=Telemetry_arr[11]; \n           local_output.sc_rssi=Telemetry_arr[12];\n           \n        break;     \n    case telemetryPL.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetryPL, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]; \n\t\t   local_output.ts=Date.parse(local_output.timestamp);\n       \n      \n\t\t   local_output.num_azionamenti_PL=Telemetry_arr[1];  //numero di azionamenti del PL (cicli time2close, time close e time2open) \n\t\t   local_output.T2Oc=Number(Telemetry_arr[2])/10;                // time to open in secondi\n           local_output.T2Cc=Number(Telemetry_arr[3])/10;                // time to close in secondi\n\t\t   local_output.TCc=Number(Telemetry_arr[4])/10;                 // time close in secondi\n\t\t   local_output.PL_state=Number(Telemetry_arr[5]);            // byte in cui è possibile inserire la\n\t\t   // segnalazione di un problema/allarme del sistema PL\n\t\t   local_output.PL_state=(\"00\" + local_output.PL_state).slice(-2)\n\t\t   //local_output.SM_state=String.fromCharCode(local_output.PL_state);\n\t\t   //local_output.SM_state=parseFloat(local_output.PL_state).toFixed(0);\n           //local_output.SM_state = local_output.PL_state.toString(16);\n           //local_output.SM_state = parseInt(local_output.PL_state, 10);\n           //local_output.SM_state = Number(local_output.PL_state);\n           //local_output.SM_state = local_output.SM_state.toString(16).substr(0,1);\n           local_output.SM_state = local_output.PL_state.substr(0,1);\n           if(local_output.SM_state==='0')local_output.SM='SM_SB';\n           if(local_output.SM_state==='1')local_output.SM='SM_T2C';\n           if(local_output.SM_state==='2')local_output.SM='SM_TC';\n           if(local_output.SM_state==='3')local_output.SM='SM_T2O';\n           if(local_output.SM_state==='4')local_output.SM='SM_PL_4';\n           if(local_output.SM_state==='5')local_output.SM='SM_NO_DATA';\n           //local_output.error_state = Number(local_output.PL_state);\n           //local_output.error_state = local_output.error_state.toString(16).substr(1,1);\n           local_output.error_state = local_output.PL_state.substr(1,1);\n\t\t   local_output.Batt=Telemetry_arr[6];\n\t\t   local_output.x_acc=Telemetry_arr[7];               // x_acc\n           local_output.y_acc=Telemetry_arr[8];              // y_acc\n           local_output.z_acc=Telemetry_arr[9];               // z_acc\n           local_output.sc_pci=Telemetry_arr[10];\n           local_output.sc_ecl=Telemetry_arr[11]; \n           local_output.sc_rssi=Telemetry_arr[12];\n            \n           local_output.operational_time = offset_time+local_output.T2Oc+local_output.T2Cc+local_output.TCc;\n\n/*            if (local_output.error_state === '0') newMetadata.error_type='NO ERROR';\n            if (local_output.error_state === '1') newMetadata.error_type='NO MATCH MODEL';\n            if (local_output.error_state === '2') newMetadata.error_type='T2O/T2C OVER RANGE';\n            if (local_output.error_state === '3') newMetadata.error_type='TC OVER RANGE';\n*/\n            if (local_output.error_state === '0') {local_output.error_type='NO ERROR';}\n            if (local_output.error_state === '1') {local_output.error_type='NO MATCH MODEL';}\n            if (local_output.error_state === '2') {local_output.error_type='T2O/T2C OVER RANGE';}\n            if (local_output.error_state === '3') {local_output.error_type='TC OVER RANGE';}\n\n\n           var pi = Math.PI;\n           var rad = Math.atan(local_output.x_acc/local_output.y_acc);    //nel caso di staffa per PoC Nordcom           \n\n           rad = Math.abs(rad);\n           var angle = rad * (180/pi);\n           local_output.angle=angle;\n           local_output.T2CS_perc=T2CS_perc;\n           local_output.T2OS_perc=T2OS_perc;\n            if ((local_output.PL_state === '00') && (local_output.T2Oc >1) && (local_output.T2Cc >1)){\n                \n                local_output.Deltaperc_T2O = ((local_output.T2Oc - T2OS_ref)/T2OS_ref)*100;\n                local_output.Deltaperc_T2C = ((local_output.T2Cc - T2CS_ref)/T2CS_ref)*100;\n\n            }\n           \n        break;    \n    case DATT.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(DATT, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\n           local_output.model=Telemetry_arr[0];         //modello\n\t\t   local_output.fw=Telemetry_arr[1];            //versione fw\n           local_output.hw=Telemetry_arr[2];            //versione hw\n\t\t   local_output.eeprom=Telemetry_arr[3];        //versione eeprom\n\t\t   local_output.OTAver=Telemetry_arr[4];        //versione fw OTA  \n\t\t   local_output.PL_Calib=Telemetry_arr[5];      // byte in cui è possibile inserire la segnalazione di un problema/allarme del sistema PL \n\t\t   local_output.Xc=Telemetry_arr[6];            //Xc\n\t\t   local_output.Yc=Telemetry_arr[7];            //Yc\n           local_output.Zc=Telemetry_arr[8];            //Zc\n           local_output.Ao_axes=Telemetry_arr[9];       //asse operativo\n           local_output.AoMax=Telemetry_arr[10];        //valore max asse operativo\n           local_output.AoTh=Telemetry_arr[11];         //soglia AoTh\n           local_output.AoTh1=Telemetry_arr[12];        //soglia AoTh1\n           local_output.T2Oc_att=Number(Telemetry_arr[13])/10;     //time to open calib\n           local_output.T2Cc_att=Number(Telemetry_arr[14])/10;     //time to close calib\n//           local_output.TCc_att=Telemetry_arr[15];      //time close calib\n           var d = new Date();\n           var datestring =  d.getFullYear() + \"-\" + (\"0\"+(d.getMonth()+1)).slice(-2) + \"-\" + (\"0\" + d.getDate()).slice(-2) + \" \" + (\"0\" + d.getHours()).slice(-2) + \":\" + (\"0\" + d.getMinutes()).slice(-2) + \":\" + (\"0\" + d.getSeconds()).slice(-2);\n           //console.log(dateTime);\n           \n           local_output.timestamp_Calib=datestring;\n           local_output.ts=Date.parse(local_output.timestamp_Calib);\n   \n           //var pi1 = Math.PI;\n           var rad1 = Math.atan(local_output.Yc/local_output.Xc);  //nel caso di PL Matera\n//           var rad1 = Math.atan(local_output.Xc/local_output.Yc);    //nel caso di staffa per PoC Nordcom\n           rad1 = Math.abs(rad1);\n           var angle1 = rad1 * (180/Math.PI);\n           local_output.angle=angle1;\n           //attr=1;\n           msgType='POST_ATTRIBUTES_REQUEST';\n        break; \n    case ACLB.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(ACLB, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(';');\n\n           \n           local_output.timestamp=datestring;\n           local_output.ts=Date.parse(local_output.timestamp);\n\n           local_output.Calib_state=Telemetry_arr[0];         //Calib_state\n            \n        break;     \n    case AOTH.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(AOTH, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\n           \n           local_output.timestamp=datestring;\n           local_output.ts=Date.parse(local_output.timestamp);\n           \n           local_output.Aoth_Perc=Telemetry_arr[0];         //Aoth_Perc\n\t\t   local_output.Aoth1_Perc=Telemetry_arr[1];        //Aoth1_Perc\n           local_output.Aoth1=Telemetry_arr[2];             //Aoth1\n\t\t   local_output.HG_T2C_IRQ=Telemetry_arr[3];        //HG_T2C_IRQ\n\t\t   local_output.AF2Ao_HG_switch=Telemetry_arr[4];   //AF_2_Ao_HG_switch \n\t\t   local_output.Aoth=Telemetry_arr[5];              //Aoth \n\t       local_output.HG_T2O_IRQ=Telemetry_arr[6];        //HG_T2O_IRQ\n\t\t   local_output.Ao2AF_HG_switch=Telemetry_arr[7];   //Ao_2_AF_HG_switch\n\t\t   local_output.Afth=Telemetry_arr[8];              //Afth\n\t\t   test = Telemetry_arr[9].split(';');\n           local_output.nr_PL_TotNoModel=test[0];               //num_PL_TotNoModel\n//           local_output.T2Oc_att=Number(Telemetry_arr[13])/10;     //time to open calib\n//           local_output.T2Cc_att=Number(Telemetry_arr[14])/10;     //time to close calib\n//myMSG=myMSG.split(';');\n//           msgType='POST_ATTRIBUTES_REQUEST';\n           \n        break; \n    case LOGD.test(DecGtw_msg_String):\n\t\t\t\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(LOGD, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n           offset = 1;\n           //var dateTime = new Date(Telemetry_arr[offset+0]*1000);\n//           newMetadata.ts=Telemetry_arr[offset+0];\n           local_output.ts=Telemetry_arr[offset+0]*1000; //in ms\n//           var m = new Date(Telemetry_arr[offset+0]*1000);\n           var m = new Date(local_output.ts);\n            var dateString =\n                m.getUTCFullYear() + \"-\" +\n                (\"0\" + (m.getUTCMonth()+1)).slice(-2) + \"-\" +\n                (\"0\" + m.getUTCDate()).slice(-2) + \" \" +\n                (\"0\" + m.getUTCHours()).slice(-2) + \":\" +\n                (\"0\" + m.getUTCMinutes()).slice(-2) + \":\" +\n                (\"0\" + m.getUTCSeconds()).slice(-2);\n           \n//           var formatted = dateTime.toGMTString();\n           //var formatted = dateTime.toISOString();\n           //moment(dateTime).format(\"YYYY-MM-DDTHH:mm:ssZZ\");\n           local_output.timestamp_log=dateString;              //timestamp\n//           local_output.timestamp=Telemetry_arr[offset+0];              //timestamp\n\t\t   local_output.num_azionamenti_PL_log=Telemetry_arr[offset+1];     //num_azionamenti_PL\n           local_output.PL_T2O_time_log=Number(Telemetry_arr[offset+2])/10;            //PL_T2O_time\n\t\t   local_output.PL_T2C_time_log=Number(Telemetry_arr[offset+3])/10;            //PL_T2C_time\n\t\t   local_output.PL_TC_time_log=Number(Telemetry_arr[offset+4])/10;             //PL_TC_time \n\t\t   local_output.PL_state_log=Telemetry_arr[offset+5];               //PL_state \n\t       local_output.PL_T2O_Average_log=Number(Telemetry_arr[offset+6])/10;         //PL_T2O_Average\n\t       local_output.PL_T2C_Average_log=Number(Telemetry_arr[offset+7])/10;         //PL_T2C_Average\n\t\t   local_output.PL_T2O_min_log=Number(Telemetry_arr[offset+8])/10;             //PL_T2O_min\n\t\t   local_output.PL_T2C_min_log=Number(Telemetry_arr[offset+9])/10;             //PL_T2C_min\n\t\t   local_output.PL_T2O_Max_log=Number(Telemetry_arr[offset+10])/10;             //PL_T2O_Max\n\t\t   local_output.PL_T2C_Max_log=Number(Telemetry_arr[offset+11])/10;             //PL_T2C_Max\n\t\t   //test = Telemetry_arr[offset+13].split(';');\n\t\t   //local_output.num_PL_OutOfRange=test[0];             \n\t\t   local_output.num_PL_OutOfRange_log=Telemetry_arr[offset+12];     //Unsuccesfull_OperationPL        //Unsuccesfull_OperationPL\n\n\t\t   local_output.T2CS_perc_log=T2CS_perc;\n           local_output.T2OS_perc_log=T2OS_perc;\n           if (local_output.PL_state_log === '0')\n           {\n                local_output.Deltaperc_T2O_avg_log = ((local_output.PL_T2O_Average_log - T2OS_ref)/T2OS_ref)*100;\n                local_output.Deltaperc_T2C_avg_log = ((local_output.PL_T2C_Average_log - T2CS_ref)/T2CS_ref)*100;\n           }\n\t\t   \n            break;\n        default:\n        break;\n}\n\nreturn local_output;\n}\nreturn {msg: msg, metadata: newMetadata, msgType: msgType};"
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "layoutX": 911,
          "layoutY": 741
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "save attribute shared",
        "debugMode": false,
        "configuration": {
          "scope": "SHARED_SCOPE"
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": null,
          "layoutX": 1173,
          "layoutY": 460
        },
        "type": "org.thingsboard.rule.engine.flow.TbRuleChainInputNode",
        "name": "to Asset",
        "debugMode": false,
        "configuration": {
          "ruleChainId": "b74edb20-c328-11ed-a76d-9955dd563d2d"
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": null,
          "layoutX": 346,
          "layoutY": 149
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "DecPLmsg",
        "debugMode": true,
        "configuration": {
          "jsScript": "//Funzione di decodifica di tutti i messaggi embedded del dispositivo\n//var DecGtw_msg_String=\"telemetryH2O=2021-02-22 18:30:00,1255,1,1,2489,dummy,-57;\";\n//var DecGtw_msg_String=\"telemetry=17:58:30,17.4,39.1,1,3296,0.8,210,0.0,0.0,-18.2,11,0036,14076;\";\n//var EVB1:1;\n//\"MSG\":\"telemetryH2O=2021-02-22 18:30:00,1255,1,1,2489,dummy,-57;\"\n// telemetry_ceng=2021-09-28 10:17:00,6254,3,0319B2A1,-85,-5,20,7D3E,-74,12,33,0,-80;\n// telemetryPL=2022-02-01 09:12:11,11,10,23,5,0,3500,,,,485,0,-69;\n//var attr=0;\n\nvar T2OS_ref=metadata.shared_T2O_reference;\nvar T2CS_ref=metadata.shared_T2C_reference;\nvar T2OS_perc=metadata.shared_T2O_percent;\nvar T2CS_perc=metadata.shared_T2C_percent;\nvar minT2O=metadata.shared_minT2O;\nvar minT2C=metadata.shared_minT2C;\nvar cnt_bug=metadata.shared_NoPlausCnt;\nvar offset_time = 5; //aggiunto come offset alla somma di tutti i tempi \nvar output_msg =msg;//output\nvar test_ct=msg.ct;\nvar  DecGtw_msg_String=msg.MSG;\nvar multimsg=DecGtw_msg_String.split(';');\nvar msg={};\nvar msg1={};\n//var msg2={};\n//var msg3={};\nvar newMetadata={};\nvar submsg={};\nvar tempmsg={};\nvar tempjsonmsg={};\nnewMetadata=metadata;\nnewMetadata.deviceName=metadata.deviceName;\n//newMetadata.deviceType=metadata.deviceType;\n//newMetadata.ts=metadata.ts;\nvar array=[];\nvar DATT1 = new RegExp(\"DATT:\");\n//var AOTH1 = new RegExp(\"AOTH:\");\nvar T2CS1 = new RegExp(\"T2CS:\");\nvar T2OS1 = new RegExp(\"T2OS:\");\n\nfor (var i = 0; i < (multimsg.length-1); i++) {\n    \n    //console.log(a[i]);\n//    newMetadata[i]=multimsg[i];\n//    if(i===0) newMetadata.array0=newMetadata[i];\n//    if(i==1) newMetadata.array1=newMetadata[i];\n//    submsg[i]=DecGTWmsg(multimsg[i]);\n\n        submsg[i]=DecGTWmsg(multimsg[i].replace(\"EXIT CMD\\n\",\"\"));\n        if(!( (DATT1.test(multimsg[i])) || (T2CS1.test(multimsg[i]))  || (T2OS1.test(multimsg[i]))  ) ){\n        tempjsonmsg.ts=submsg[i].ts;tempjsonmsg.values=submsg[i];\n        tempmsg[i]=tempjsonmsg;\n        tempmsg[i]=JSON.stringify(tempmsg[i]);\n        array=array.concat(tempmsg[i]);\n        //}else newMetadata=submsg[i];\n}else \n{\n    //msg=submsg[i];\n    newMetadata.attribute=JSON.stringify(submsg[i]);\n}\n       \n} //chiude for\nmsg=JSON.parse('['+array+']');\n\n\n\n\nfunction DecGTWmsg(DecGtw_msg_String){\nvar local_output={};\nlocal_output.MSG=DecGtw_msg_String;\nlocal_output.ct=test_ct;\n\n\nvar telemetry = new RegExp(\"telemetry=\");\nvar telemetry_ceng = new RegExp(\"telemetry_ceng=\");\nvar telemetryPL = new RegExp(\"telemetryPL=\");\nvar DATT = new RegExp(\"DATT:\");\nvar ACLB = new RegExp(\"ACLB:\");\nvar AOTH = new RegExp(\"AOTH:\");\nvar T2CS = new RegExp(\"T2CS:\");\nvar T2OS = new RegExp(\"T2OS:\");\nvar LOGD = new RegExp(\"LOGD:\");\nvar Telemetry_arr; //telemetry splitted\nswitch (true) {\n    case telemetry.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetry, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]; local_output.temperature=Telemetry_arr[1];   local_output.humidity=Telemetry_arr[2]; \n       local_output.out_state=Telemetry_arr[3];\n\t\t   //local_output.Batt=Telemetry_arr[4];\n\t\t   local_output.Batt=Telemetry_arr[6];\n\t\t   local_output.mc=Telemetry_arr[7];\n       //local_output.current=Telemetry_arr[5];     local_output.power=Telemetry_arr[6];    local_output.ax=Telemetry_arr[7];\n       local_output.ay=Telemetry_arr[8];          local_output.az=Telemetry_arr[9];         \n       local_output.sc_pci=Telemetry_arr[10];local_output.sc_ecl=Telemetry_arr[11]; local_output.sc_rssi=Telemetry_arr[12];\n        break;\n    case telemetry_ceng.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetry_ceng, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]; \n\t\t   local_output.EARFCN=Telemetry_arr[1];   \n\t\t   local_output.EARFC_off=Telemetry_arr[2]; \n           local_output.Cell_ID=Telemetry_arr[3];\n\t\t   local_output.RSRP=Telemetry_arr[4];\n\t\t   local_output.RSRQ=Telemetry_arr[5];\n\t\t   local_output.Band=Telemetry_arr[6];\n\t\t   local_output.TAC=Telemetry_arr[7];\n           local_output.RE_RSRP=Telemetry_arr[8];          \n           local_output.SNR=Telemetry_arr[9];         \n           local_output.sc_pci=Telemetry_arr[10];\n           local_output.sc_ecl=Telemetry_arr[11]; \n           local_output.sc_rssi=Telemetry_arr[12];\n        break;     \n    case telemetryPL.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetryPL, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t\t  \n\t\t//local_output.PL_state=Number(Telemetry_arr[5]);\n\t\tvar PL_state_bug =Number(Telemetry_arr[5]);\n\t\tif (PL_state_bug != \"05\")\n\t\t{\t  \n\t\t   local_output.utc_timestamp=Telemetry_arr[0]+\"+0000\"; \n\t\t   local_output.ts=Date.parse(local_output.utc_timestamp);\n\t\t   var d = new Date(local_output.ts);\n\t\t    var datestring =  d.getFullYear() + \"-\" + (\"0\"+(d.getMonth()+1)).slice(-2) + \"-\" + (\"0\" + d.getDate()).slice(-2) + \" \" + (\"0\"+(d.getHours())).slice(-2) + \":\" + (\"0\" + d.getMinutes()).slice(-2) + \":\" + (\"0\" + d.getSeconds()).slice(-2);//+ \";\";\n\t\t   local_output.timestamp=datestring;\n\t\t   local_output.num_azionamenti_PL=Telemetry_arr[1];  //numero di azionamenti del PL (cicli time2close, time close e time2open) \n\t\t   local_output.T2Oc=Number(Telemetry_arr[2])/10;                // time to open in secondi\n           local_output.T2Cc=Number(Telemetry_arr[3])/10;                // time to close in secondi\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           \n           //var min_flag=0;\n\t\t   //if(local_output.T2Oc<1) {local_output.T2Oc=Number(T2OS_ref)-0.2;min_flag=1;}\n\t\t   //if(local_output.T2Cc<1) {local_output.T2Cc=Number(T2CS_ref)-0.2;min_flag=1;}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           \n\t\t   local_output.TCc=Number(Telemetry_arr[4])/10;                 // time close in secondi\n//dav\t\t   local_output.PL_state=Number(Telemetry_arr[5]);            // byte in cui è possibile inserire la\n\t\t   // segnalazione di un problema/allarme del sistema PL\n\t\t   local_output.PL_state=PL_state_bug;\n\t\t   local_output.PL_state=(\"00\" + local_output.PL_state).slice(-2)\n\n           local_output.SM_state = local_output.PL_state.substr(0,1);\n           if(local_output.SM_state==='0')local_output.SM='SM_SB';\n           if(local_output.SM_state==='1')local_output.SM='SM_T2C';\n           if(local_output.SM_state==='2')local_output.SM='SM_TC';\n           if(local_output.SM_state==='3')local_output.SM='SM_T2O';\n           if(local_output.SM_state==='4')local_output.SM='SM_PL_4';\n           if(local_output.SM_state==='5')local_output.SM='SM_NO_DATA';\n\n           local_output.error_state = local_output.PL_state.substr(1,1);\n\t\t   local_output.Batt=Telemetry_arr[6];\n\t\t   local_output.x_acc=Telemetry_arr[7];               // x_acc\n           local_output.y_acc=Telemetry_arr[8];              // y_acc\n           local_output.z_acc=Telemetry_arr[9];               // z_acc\n           local_output.sc_pci=Telemetry_arr[10];\n           local_output.sc_ecl=Telemetry_arr[11]; \n           local_output.sc_rssi=Telemetry_arr[12];\n           \n           local_output.operational_time = Number((offset_time+local_output.T2Oc+local_output.T2Cc+local_output.TCc).toFixed(2));\n            if (local_output.error_state === '0') {local_output.error_type='NO ERROR';}\n            if (local_output.error_state === '1') {local_output.error_type='NO MATCH MODEL';}\n            if (local_output.error_state === '2') {local_output.error_type='T2O/T2C OVER RANGE';}\n            if (local_output.error_state === '3') {local_output.error_type='TC OVER RANGE';}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n           //if (min_flag)\n           // {\n           //     local_output.error_type='NO ERROR';\n           //     local_output.error_state ='0';\n           //     min_flag=0;\n          //  }\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    /*       var pi = Math.PI;\n           if (newMetadata.deviceName != 'CLR-PL_test'){\n               var rad = Math.atan(local_output.x_acc/local_output.y_acc);    //nel caso di staffa per PoC Nordcom\n               rad = Math.abs(rad);\n               var angle = rad * (180/pi);\n           }\n           else {\n               if(local_output.SM_state==='0') angle=0; //open\n               if(local_output.SM_state==='2') angle=90; //close\n               //var rad = Math.atan(local_output.y_acc/local_output.x_acc);    //nel caso di staffa lab\n           }*/\n           var angle;\n            if(local_output.SM_state==='0') angle=0; //open\n            if(local_output.SM_state==='2') angle=90; //close\n\n           local_output.angle=angle;\n\t\t   local_output.T2CS_perc=T2CS_perc;\n           local_output.T2OS_perc=T2OS_perc;\n           //calcolo le percentuali in caso di no warning o OverRange\n            if ((local_output.PL_state === '00')||(local_output.PL_state === '02')){\n                \n                local_output.Deltaperc_T2O = Number((((local_output.T2Oc - T2OS_ref)/T2OS_ref)*100).toFixed(2));\n                local_output.Deltaperc_T2C = Number((((local_output.T2Cc - T2CS_ref)/T2CS_ref)*100).toFixed(2));\n            }\n\t\t}\n\t\telse\n\t\t{\n            //incremento contatore sul bug/disturbo no plausibilità\n\t\t    cnt_bug++;\n\t\t    //local_output.Plausibilità_cnt=cnt_bug;\n\t\t    metadata.shared_NoPlausCnt=cnt_bug;\n\t\t   // msgType='POST_ATTRIBUTES_REQUEST';\n\t\t}\n           \n        break;    \n    case DATT.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(DATT, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\n           local_output.model=Telemetry_arr[0];         //modello\n\t\t   local_output.fw=Telemetry_arr[1];            //versione fw\n           local_output.hw=Telemetry_arr[2];            //versione hw\n\t\t   local_output.eeprom=Telemetry_arr[3];        //versione eeprom\n\t\t   local_output.OTAver=Telemetry_arr[4];        //versione fw OTA  \n\t\t   local_output.PL_Calib=Telemetry_arr[5];      // byte in cui è possibile inserire la segnalazione di un problema/allarme del sistema PL \n\t\t   local_output.Xc=Telemetry_arr[6];            //Xc\n\t\t   local_output.Yc=Telemetry_arr[7];            //Yc\n           local_output.Zc=Telemetry_arr[8];            //Zc\n           local_output.Ao_axes=Telemetry_arr[9];       //asse operativo\n           local_output.AoMax=Telemetry_arr[10];        //valore max asse operativo\n           local_output.AoTh=Telemetry_arr[11];         //soglia AoTh\n           local_output.AoTh1=Telemetry_arr[12];        //soglia AoTh1\n           local_output.T2Oc_att=Number(Telemetry_arr[13])/10;     //time to open calib\n           local_output.T2Cc_att=Number(Telemetry_arr[14])/10;     //time to close calib\n//           local_output.TCc_att=Telemetry_arr[15];      //time close calib\n           var d = new Date();\n            \n            //da sistemare: aggiunto +1 in d.getHours() per impostare orario in locale roma\n           \n           var datestring =  d.getFullYear() + \"-\" + (\"0\"+(d.getMonth()+1)).slice(-2) + \"-\" + (\"0\" + d.getDate()).slice(-2) + \" \" + (\"0\" + (d.getHours())).slice(-2) + \":\" + (\"0\" + d.getMinutes()).slice(-2) + \":\" + (\"0\" + d.getSeconds()).slice(-2);\n           //console.log(dateTime);\n           \n           local_output.timestamp_Calib=datestring;\n   \n           //var pi1 = Math.PI;\n//           var rad1 = Math.atan(local_output.Yc/local_output.Xc);  //nel caso di PL Matera\n           var rad1 = Math.atan(local_output.Xc/local_output.Yc);    //nel caso di staffa per PoC Nordcom\n           rad1 = Math.abs(rad1);\n           var angle1 = rad1 * (180/Math.PI);\n           local_output.angle=angle1;\n           //attr=1;\n           msgType='POST_ATTRIBUTES_REQUEST';\n        break; \n    case ACLB.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(ACLB, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(';');\n\n           local_output.Calib_state=Telemetry_arr[0];         //Calib_state\n\n        break;     \n    case AOTH.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(AOTH, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t\t\n\t\t\tvar d = new Date();\n            var datestring =  d.getFullYear() + \"-\" + (\"0\"+(d.getMonth()+1)).slice(-2) + \"-\" + (\"0\" + d.getDate()).slice(-2) + \" \" + (\"0\" + d.getHours()).slice(-2) + \":\" + (\"0\" + d.getMinutes()).slice(-2) + \":\" + (\"0\" + d.getSeconds()).slice(-2);\n           local_output.timestamp=datestring;\n           local_output.ts=Date.parse(local_output.timestamp);\n\n           local_output.Aoth_Perc=Telemetry_arr[0];         //Aoth_Perc\n\t\t   local_output.Aoth1_Perc=Telemetry_arr[1];        //Aoth1_Perc\n           local_output.Aoth1=Telemetry_arr[2];             //Aoth1\n\t\t   local_output.HG_T2C_IRQ=Telemetry_arr[3];        //HG_T2C_IRQ\n\t\t   local_output.AF2Ao_HG_switch=Telemetry_arr[4];   //AF_2_Ao_HG_switch \n\t\t   local_output.Aoth=Telemetry_arr[5];              //Aoth \n\t       local_output.HG_T2O_IRQ=Telemetry_arr[6];        //HG_T2O_IRQ\n\t\t   local_output.Ao2AF_HG_switch=Telemetry_arr[7];   //Ao_2_AF_HG_switch\n\t\t   local_output.Afth=Telemetry_arr[8];              //Afth\n\t\t   test = Telemetry_arr[9].split(';');\n           local_output.nr_PL_TotNoModel=test[0];               //num_PL_TotNoModel\n\n        break; \n    case LOGD.test(DecGtw_msg_String):\n\t\t\t\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(LOGD, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n           offset = 1; //per non considerare il primo valore che rappresenta l'indice di log\n           //var dateTime = new Date(Telemetry_arr[offset+0]*1000);\n//           newMetadata.ts=Telemetry_arr[offset+0];\n        //local_output.PL_state_Bug_log=Number(Telemetry_arr[offset+5]);               //PL_state\n        var PL_state_Bug_log=Number(Telemetry_arr[offset+5]);\n        if(PL_state_Bug_log!=\"05\")\n        {\n           local_output.ts=(Telemetry_arr[offset+0]*1000);//+3600000;\n           //var m = new Date(Telemetry_arr[offset+0]*1000);\n           var timeOffsetInHours  =0;\n           var m = new Date(local_output.ts);\n           // var dateString =\n           //     m.getUTCFullYear() + \"-\" +\n           //    (\"0\" + (m.getUTCMonth()+1)).slice(-2) + \"-\" +\n           //     (\"0\" + m.getUTCDate()).slice(-2) + \" \" +\n           //     (\"0\" + (m.getUTCHours())).slice(-2) + \":\" +\n           //     (\"0\" + m.getUTCMinutes()).slice(-2) + \":\" +\n           //     (\"0\" + m.getUTCSeconds()).slice(-2);\n                \n            var dateString =  m.getFullYear() + \"-\" + (\"0\"+(m.getMonth()+1)).slice(-2) + \"-\" + (\"0\" + m.getDate()).slice(-2) + \" \" + (\"0\"+(m.getHours()+timeOffsetInHours)).slice(-2) + \":\" + (\"0\" + m.getMinutes()).slice(-2) + \":\" + (\"0\" + m.getSeconds()).slice(-2);//+ \";\";\n           \n//           var formatted = dateTime.toGMTString();\n           //var formatted = dateTime.toISOString();\n           //moment(dateTime).format(\"YYYY-MM-DDTHH:mm:ssZZ\");\n           local_output.timestamp_log=dateString;              //timestamp\n//           local_output.timestamp=Telemetry_arr[offset+0];              //timestamp\n\t\t   local_output.num_azionamenti_PL_log=Telemetry_arr[offset+1];     //num_azionamenti_PL\n           local_output.PL_T2O_time_log=Number(Telemetry_arr[offset+2])/10;            //PL_T2O_time\n\t\t   local_output.PL_T2C_time_log=Number(Telemetry_arr[offset+3])/10;            //PL_T2C_time\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           \n\t\t   //var min_flag_log=0;\n\t\t   //if(local_output.PL_T2O_time_log<1) {local_output.PL_T2O_time_log=Number(T2OS_ref)-0.2;min_flag_log=1;}\n\t\t   //if(local_output.PL_T2C_time_log<1) {local_output.PL_T2C_time_log=Number(T2CS_ref)-0.2;min_flag_log=1;}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           \n\t\t   local_output.PL_TC_time_log=Number(Telemetry_arr[offset+4])/10;             //PL_TC_time \n//dav\t\t   local_output.PL_state_log=Number(Telemetry_arr[offset+5]);               //PL_state \n\t\t   local_output.PL_state_log=PL_state_Bug_log;               //PL_state \n\t       local_output.PL_T2O_Average_log=Number(Telemetry_arr[offset+6])/10;         //PL_T2O_Average\n\t       local_output.PL_T2C_Average_log=Number(Telemetry_arr[offset+7])/10;         //PL_T2C_Average\n\t       \n\t\t   local_output.PL_T2O_min_log=Number(Telemetry_arr[offset+8])/10;             //PL_T2O_min\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           \n\t\t   //if (local_output.PL_T2O_min_log<1) local_output.PL_T2O_min_log = Number(minT2O);\n\t\t   //if ((local_output.PL_T2O_min_log>1) && (local_output.PL_T2O_min_log<Number(minT2O))) newMetadata.minT2O=local_output.PL_T2O_min_log;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           \n\t\t   \n\t\t   local_output.PL_T2C_min_log=Number(Telemetry_arr[offset+9])/10;             //PL_T2C_min\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           \n\t\t   //if (local_output.PL_T2C_min_log<1) local_output.PL_T2C_min_log = Number(minT2C);\n\t\t   //if ((local_output.PL_T2C_min_log>1) && (local_output.PL_T2C_min_log<Number(minT2C))) newMetadata.minT2C=local_output.PL_T2C_min_log;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           \n\n\t\t   \n\t\t   local_output.PL_T2O_Max_log=Number(Telemetry_arr[offset+10])/10;             //PL_T2O_Max\n\t\t   local_output.PL_T2C_Max_log=Number(Telemetry_arr[offset+11])/10;             //PL_T2C_Max\n\t\t   //test = Telemetry_arr[offset+13].split(';');\n\t\t   //local_output.num_PL_OutOfRange=test[0];  \n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t   \n\t\t   //commentate il 280323 dopo aggiornamento fw per inserire in struttura al \n\t\t   //posto di OutofRange il valore del contatore nomodel\n//\t\t   local_output.numPL_OutRange_log=Telemetry_arr[offset+12];     //Unsuccesfull_Misure        \n//\t\t   local_output.num_PL_TotNoModel_log=Telemetry_arr[offset+13]; //NoModel_MisurePL\n\t\t   \n//\t\t   local_output.numPL_OutRange_log=Telemetry_arr[offset+12];     //Unsuccesfull_Misure        \n\t\t   local_output.num_PL_TotNoModel_log=Telemetry_arr[offset+12]; //NoModel_MisurePL\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t   \n\n\t\t   local_output.T2CS_perc_log=T2CS_perc;\n           local_output.T2OS_perc_log=T2OS_perc;\n           local_output.PL_state_log=(\"00\" + local_output.PL_state_log).slice(-2);\n           \n           //Ricalcolo della statistica in termini %, a regime i tempi possono sparire\n                local_output.Deltaperc_T2O_avg_log = Number((((local_output.PL_T2O_Average_log - T2OS_ref)/T2OS_ref)*100).toFixed(2));\n                local_output.Deltaperc_T2C_avg_log = Number((((local_output.PL_T2C_Average_log - T2CS_ref)/T2CS_ref)*100).toFixed(2));\n                local_output.Deltaperc_T2O_min_log = Number((((local_output.PL_T2O_min_log - T2OS_ref)/T2OS_ref)*100).toFixed(2));\n                local_output.Deltaperc_T2C_min_log = Number((((local_output.PL_T2C_min_log - T2CS_ref)/T2CS_ref)*100).toFixed(2));\n                local_output.Deltaperc_T2O_Max_log = Number((((local_output.PL_T2O_Max_log - T2OS_ref)/T2OS_ref)*100).toFixed(2));\n                local_output.Deltaperc_T2C_Max_log = Number((((local_output.PL_T2C_Max_log - T2CS_ref)/T2CS_ref)*100).toFixed(2));\n                \n           \n           //Variabili da plottare nel grafico settimanale degli scostamenti, la media se schedulato\n           if (local_output.PL_state_log === '00')//Log schedulato\n           {\n                local_output.Deltaperc_T2O_Plot = local_output.Deltaperc_T2O_avg_log;\n                local_output.Deltaperc_T2C_Plot = local_output.Deltaperc_T2C_avg_log;\n                \n               \n           }else if(local_output.PL_state_log === '02')//OverRange da fascia PM\t \n           {\n               local_output.Deltaperc_T2O_Plot = Number((((local_output.PL_T2O_time_log - T2OS_ref)/T2OS_ref)*100).toFixed(2));\n               local_output.Deltaperc_T2C_Plot = Number((((local_output.PL_T2C_time_log - T2CS_ref)/T2CS_ref)*100).toFixed(2)); \n           }\n           \n           local_output.SM_state_log = local_output.PL_state_log.substr(0,1);\n           local_output.error_state_log = local_output.PL_state_log.substr(1,1);\n           \n           if(local_output.SM_state_log==='0')local_output.SM_log='SM_SB';\n           if(local_output.SM_state_log==='1')local_output.SM_log='SM_T2C';\n           if(local_output.SM_state_log==='2')local_output.SM_log='SM_TC';\n           if(local_output.SM_state_log==='3')local_output.SM_log='SM_T2O';\n           if(local_output.SM_state_log==='4')local_output.SM_log='SM_PL_4';\n           if(local_output.SM_state_log==='5')local_output.SM_log='SM_NO_DATA';\n           \n            if (local_output.error_state_log === '0') {local_output.error_type_log='NO ERROR';}\n            if (local_output.error_state_log === '1') {local_output.error_type_log='NO MATCH MODEL';}\n            if (local_output.error_state_log === '2') {local_output.error_type_log='T2O/T2C OVER RANGE';}\n            if (local_output.error_state_log === '3') {local_output.error_type_log='TC OVER RANGE';}\n            if(local_output.SM_state_log==='0') angle=0; //open\n            if(local_output.SM_state_log==='2') angle=90; //close\n            local_output.angle_log=angle;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           \n            //if (min_flag_log)\n            //{\n            //    local_output.error_type_log='NO ERROR';\n            //    local_output.error_state_log = '0';\n            //    min_flag_log=0;\n            //}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     \n        }//chiude if su PL_state diverso da 5      \n            break;\n        \n    case T2CS.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(T2CS, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\n           local_output.T2C_reference=Number(Telemetry_arr[0])/10;         //T2C_reference\n\t\t   local_output.T2C_percent=Number(Telemetry_arr[1]);       //T2C_percent\n           msgType='POST_ATTRIBUTES_REQUEST';\n        break;\n    case T2OS.test(DecGtw_msg_String):\n    \t\t//console.log(\"telemetry\");\n    \t\tDecGtw_msg_String = DecGtw_msg_String.replace(T2OS, \"\").substr(0, DecGtw_msg_String.length - 1);\n    \t\tTelemetry_arr = DecGtw_msg_String.split(',');\n    \n           local_output.T2O_reference=Number(Telemetry_arr[0])/10;         //T2C_reference\n    \t   local_output.T2O_percent=Number(Telemetry_arr[1]);        //T2C_percent\n           msgType='POST_ATTRIBUTES_REQUEST';\n        break;  \n        default:\n        break;\n}\n\nreturn local_output;\n}\nreturn {msg: msg, metadata: newMetadata, msgType: msgType};"
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 228,
          "layoutY": 45
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "get T2OS e T2CS",
        "debugMode": true,
        "configuration": {
          "tellFailureIfAbsent": true,
          "clientAttributeNames": [],
          "sharedAttributeNames": [
            "T2C_reference",
            "T2C_percent",
            "T2O_reference",
            "T2O_percent",
            "minT2C",
            "minT2O"
          ],
          "serverAttributeNames": [],
          "latestTsKeyNames": [],
          "getLatestValueWithTs": false
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": null,
          "layoutX": 880,
          "layoutY": 94
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgTimeseriesNode",
        "name": "save telemetry",
        "debugMode": true,
        "configuration": {
          "defaultTTL": 0
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 872,
          "layoutY": 202
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "save shared attributes",
        "debugMode": false,
        "configuration": {
          "scope": "SHARED_SCOPE",
          "notifyDevice": false
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 611,
          "layoutY": 209
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "cmd_attribute",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (metadata.attribute != null) \nmsg = JSON.parse(metadata.attribute);\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 619,
          "layoutY": 97
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "cmd_telemetry",
        "debugMode": true,
        "configuration": {
          "jsScript": "if(msg != null)  {\n    msgType = 'POST_TELEMETRY_REQUEST';\n\n}\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": null,
          "layoutX": 86,
          "layoutY": 484
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "DecGTWmsg",
        "debugMode": false,
        "configuration": {
          "jsScript": "//Funzione di decodifica di tutti i messaggi embedded del dispositivo\n//var DecGtw_msg_String=\"telemetryH2O=2021-02-22 18:30:00,1255,1,1,2489,dummy,-57;\";\n//var DecGtw_msg_String=\"telemetry=17:58:30,17.4,39.1,1,3296,0.8,210,0.0,0.0,-18.2,11,0036,14076;\";\n//var EVB1:1;\n//\"MSG\":\"telemetryH2O=2021-02-22 18:30:00,1255,1,1,2489,dummy,-57;\"\n// telemetry_ceng=2021-09-28 10:17:00,6254,3,0319B2A1,-85,-5,20,7D3E,-74,12,33,0,-80;\n// telemetryPL=2022-02-01 09:12:11,11,10,23,5,0,3500,,,,485,0,-69;\n//var attr=0;\n\nvar T2OS_ref=metadata.shared_T2O_reference;\nvar T2CS_ref=metadata.shared_T2C_reference;\nvar T2OS_perc=metadata.shared_T2O_percent;\nvar T2CS_perc=metadata.shared_T2C_percent;\nvar offset_time = 5; //aggiunto come offset alla somma di tutti i tempi \nvar output_msg =msg;//output\nvar test_ct=msg.ct;\nvar  DecGtw_msg_String=msg.MSG;\nvar multimsg=DecGtw_msg_String.split(';');\nvar msg={};\nvar msg1={};\n//var msg2={};\n//var msg3={};\nvar newMetadata={};\nvar submsg={};\nvar tempmsg={};\nvar tempjsonmsg={};\nnewMetadata=metadata;\n//newMetadata.deviceName=metadata.deviceName;\n//newMetadata.deviceType=metadata.deviceType;\n//newMetadata.ts=metadata.ts;\nvar array=[];\nvar DATT1 = new RegExp(\"DATT:\");\nvar T2CS1 = new RegExp(\"T2CS:\");\nvar T2OS1 = new RegExp(\"T2OS:\");\nfor (var i = 0; i < (multimsg.length-1); i++) {\n    \n    //console.log(a[i]);\n//    newMetadata[i]=multimsg[i];\n//    if(i===0) newMetadata.array0=newMetadata[i];\n//    if(i==1) newMetadata.array1=newMetadata[i];\n//    submsg[i]=DecGTWmsg(multimsg[i]);\n\n        submsg[i]=DecGTWmsg(multimsg[i].replace(\"EXIT CMD\\n\",\"\"));\n        if(!( (DATT1.test(multimsg[i])) || (T2CS1.test(multimsg[i]))  || (T2OS1.test(multimsg[i])) ) ){\n        tempjsonmsg.ts=submsg[i].ts;tempjsonmsg.values=submsg[i];\n        tempmsg[i]=tempjsonmsg;\n        tempmsg[i]=JSON.stringify(tempmsg[i]);\n        array=array.concat(tempmsg[i]);\n        //}else newMetadata=submsg[i];\n}else \n{\n    //msg=submsg[i];\n    newMetadata.attribute=JSON.stringify(submsg[i]);\n}\n       \n} //chiude for\nmsg=JSON.parse('['+array+']');\n\n\n\n\nfunction DecGTWmsg(DecGtw_msg_String){\nvar local_output={};\nlocal_output.MSG=DecGtw_msg_String;\nlocal_output.ct=test_ct;\n\n\nvar telemetry = new RegExp(\"telemetry=\");\nvar telemetry_ceng = new RegExp(\"telemetry_ceng=\");\nvar telemetryPL = new RegExp(\"telemetryPL=\");\nvar DATT = new RegExp(\"DATT:\");\nvar ACLB = new RegExp(\"ACLB:\");\nvar AOTH = new RegExp(\"AOTH:\");\nvar T2CS = new RegExp(\"T2CS:\");\nvar T2OS = new RegExp(\"T2OS:\");\nvar LOGD = new RegExp(\"LOGD:\");\nvar Telemetry_arr; //telemetry splitted\nswitch (true) {\n    case telemetry.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetry, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]; local_output.temperature=Telemetry_arr[1];   local_output.humidity=Telemetry_arr[2]; \n       local_output.out_state=Telemetry_arr[3];\n\t\t   //local_output.Batt=Telemetry_arr[4];\n\t\t   local_output.Batt=Telemetry_arr[6];\n\t\t   local_output.mc=Telemetry_arr[7];\n       //local_output.current=Telemetry_arr[5];     local_output.power=Telemetry_arr[6];    local_output.ax=Telemetry_arr[7];\n       local_output.ay=Telemetry_arr[8];          local_output.az=Telemetry_arr[9];         \n       local_output.sc_pci=Telemetry_arr[10];local_output.sc_ecl=Telemetry_arr[11]; local_output.sc_rssi=Telemetry_arr[12];\n        break;\n    case telemetry_ceng.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetry_ceng, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]; \n\t\t   local_output.EARFCN=Telemetry_arr[1];   \n\t\t   local_output.EARFC_off=Telemetry_arr[2]; \n           local_output.Cell_ID=Telemetry_arr[3];\n\t\t   local_output.RSRP=Telemetry_arr[4];\n\t\t   local_output.RSRQ=Telemetry_arr[5];\n\t\t   local_output.Band=Telemetry_arr[6];\n\t\t   local_output.TAC=Telemetry_arr[7];\n           local_output.RE_RSRP=Telemetry_arr[8];          \n           local_output.SNR=Telemetry_arr[9];         \n           local_output.sc_pci=Telemetry_arr[10];\n           local_output.sc_ecl=Telemetry_arr[11]; \n           local_output.sc_rssi=Telemetry_arr[12];\n        break;     \n    case telemetryPL.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetryPL, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]+\"+0100\"; \n\t\t   local_output.ts=Date.parse(local_output.timestamp);\n\t\t   local_output.num_azionamenti_PL=Telemetry_arr[1];  //numero di azionamenti del PL (cicli time2close, time close e time2open) \n\t\t   local_output.T2Oc=Number(Telemetry_arr[2])/10;                // time to open in secondi\n           local_output.T2Cc=Number(Telemetry_arr[3])/10;                // time to close in secondi\n\t\t   local_output.TCc=Number(Telemetry_arr[4])/10;                 // time close in secondi\n\t\t   local_output.PL_state=Number(Telemetry_arr[5]);            // byte in cui è possibile inserire la\n\t\t   // segnalazione di un problema/allarme del sistema PL\n\t\t   local_output.PL_state=(\"00\" + local_output.PL_state).slice(-2)\n\n           local_output.SM_state = local_output.PL_state.substr(0,1);\n           if(local_output.SM_state==='0')local_output.SM='SM_SB';\n           if(local_output.SM_state==='1')local_output.SM='SM_T2C';\n           if(local_output.SM_state==='2')local_output.SM='SM_TC';\n           if(local_output.SM_state==='3')local_output.SM='SM_T2O';\n           if(local_output.SM_state==='4')local_output.SM='SM_PL_4';\n           if(local_output.SM_state==='5')local_output.SM='SM_NO_DATA';\n\n           local_output.error_state = local_output.PL_state.substr(1,1);\n\t\t   local_output.Batt=Telemetry_arr[6];\n\t\t   local_output.x_acc=Telemetry_arr[7];               // x_acc\n           local_output.y_acc=Telemetry_arr[8];              // y_acc\n           local_output.z_acc=Telemetry_arr[9];               // z_acc\n           local_output.sc_pci=Telemetry_arr[10];\n           local_output.sc_ecl=Telemetry_arr[11]; \n           local_output.sc_rssi=Telemetry_arr[12];\n           \n           local_output.operational_time = offset_time+local_output.T2Oc+local_output.T2Cc+local_output.TCc;\n            if (local_output.error_state === '0') {local_output.error_type='NO ERROR';}\n            if (local_output.error_state === '1') {local_output.error_type='NO MATCH MODEL';}\n            if (local_output.error_state === '2') {local_output.error_type='T2O/T2C OVER RANGE';}\n            if (local_output.error_state === '3') {local_output.error_type='TC OVER RANGE';}\n\n           var pi = Math.PI;\n           //var rad = Math.atan(local_output.x_acc/local_output.y_acc);    //nel caso di staffa per PoC Nordcom\n           var rad = Math.atan(local_output.y_acc/local_output.x_acc);    //nel caso di staffa lab\n           rad = Math.abs(rad);\n           var angle = rad * (180/pi);\n           local_output.angle=angle;\n\n            if (local_output.PL_state === '00'){\n                \n                local_output.Deltaperc_T2O = ((local_output.T2Oc - T2OS_ref)/T2OS_ref)*100;\n                local_output.Deltaperc_T2C = ((local_output.T2Cc - T2CS_ref)/T2CS_ref)*100;\n\n            }\n           \n        break;    \n    case DATT.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(DATT, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\n           local_output.model=Telemetry_arr[0];         //modello\n\t\t   local_output.fw=Telemetry_arr[1];            //versione fw\n           local_output.hw=Telemetry_arr[2];            //versione hw\n\t\t   local_output.eeprom=Telemetry_arr[3];        //versione eeprom\n\t\t   local_output.OTAver=Telemetry_arr[4];        //versione fw OTA  \n\t\t   local_output.PL_Calib=Telemetry_arr[5];      // byte in cui è possibile inserire la segnalazione di un problema/allarme del sistema PL \n\t\t   local_output.Xc=Telemetry_arr[6];            //Xc\n\t\t   local_output.Yc=Telemetry_arr[7];            //Yc\n           local_output.Zc=Telemetry_arr[8];            //Zc\n           local_output.Ao_axes=Telemetry_arr[9];       //asse operativo\n           local_output.AoMax=Telemetry_arr[10];        //valore max asse operativo\n           local_output.AoTh=Telemetry_arr[11];         //soglia AoTh\n           local_output.AoTh1=Telemetry_arr[12];        //soglia AoTh1\n           local_output.T2Oc_att=Number(Telemetry_arr[13])/10;     //time to open calib\n           local_output.T2Cc_att=Number(Telemetry_arr[14])/10;     //time to close calib\n//           local_output.TCc_att=Telemetry_arr[15];      //time close calib\n           var d = new Date();\n            \n            //da sistemare: aggiunto +1 in d.getHours() per impostare orario in locale roma\n           \n           var datestring =  d.getFullYear() + \"-\" + (\"0\"+(d.getMonth()+1)).slice(-2) + \"-\" + (\"0\" + d.getDate()).slice(-2) + \" \" + (\"0\" + (d.getHours()+1)).slice(-2) + \":\" + (\"0\" + d.getMinutes()).slice(-2) + \":\" + (\"0\" + d.getSeconds()).slice(-2);\n           //console.log(dateTime);\n           \n           local_output.timestamp_Calib=datestring;\n   \n           //var pi1 = Math.PI;\n//           var rad1 = Math.atan(local_output.Yc/local_output.Xc);  //nel caso di PL Matera\n           var rad1 = Math.atan(local_output.Xc/local_output.Yc);    //nel caso di staffa per PoC Nordcom\n           rad1 = Math.abs(rad1);\n           var angle1 = rad1 * (180/Math.PI);\n           local_output.angle=angle1;\n           //attr=1;\n           msgType='POST_ATTRIBUTES_REQUEST';\n        break; \n    case ACLB.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(ACLB, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(';');\n\n           local_output.Calib_state=Telemetry_arr[0];         //Calib_state\n\n        break;     \n    case AOTH.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(AOTH, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\n           local_output.Aoth_Perc=Telemetry_arr[0];         //Aoth_Perc\n\t\t   local_output.Aoth1_Perc=Telemetry_arr[1];        //Aoth1_Perc\n           local_output.Aoth1=Telemetry_arr[2];             //Aoth1\n\t\t   local_output.HG_T2C_IRQ=Telemetry_arr[3];        //HG_T2C_IRQ\n\t\t   local_output.AF2Ao_HG_switch=Telemetry_arr[4];   //AF_2_Ao_HG_switch \n\t\t   local_output.Aoth=Telemetry_arr[5];              //Aoth \n\t       local_output.HG_T2O_IRQ=Telemetry_arr[6];        //HG_T2O_IRQ\n\t\t   local_output.Ao2AF_HG_switch=Telemetry_arr[7];   //Ao_2_AF_HG_switch\n\t\t   local_output.Afth=Telemetry_arr[8];              //Afth\n\t\t   test = Telemetry_arr[9].split(';');\n           local_output.nr_PL_TotNoModel=test[0];               //num_PL_TotNoModel\n\n        break; \n    case LOGD.test(DecGtw_msg_String):\n\t\t\t\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(LOGD, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n           offset = 1; //per non considerare il primo valore che rappresenta l'indice di log\n           //var dateTime = new Date(Telemetry_arr[offset+0]*1000);\n//           newMetadata.ts=Telemetry_arr[offset+0];\n           local_output.ts=Telemetry_arr[offset+0]*1000;\n           //var m = new Date(Telemetry_arr[offset+0]*1000);\n           var m = new Date(local_output.ts);\n            var dateString =\n                m.getUTCFullYear() + \"-\" +\n                (\"0\" + (m.getUTCMonth()+1)).slice(-2) + \"-\" +\n                (\"0\" + m.getUTCDate()).slice(-2) + \" \" +\n                (\"0\" + m.getUTCHours()).slice(-2) + \":\" +\n                (\"0\" + m.getUTCMinutes()).slice(-2) + \":\" +\n                (\"0\" + m.getUTCSeconds()).slice(-2);\n           \n//           var formatted = dateTime.toGMTString();\n           //var formatted = dateTime.toISOString();\n           //moment(dateTime).format(\"YYYY-MM-DDTHH:mm:ssZZ\");\n           local_output.timestamp_log=dateString;              //timestamp\n//           local_output.timestamp=Telemetry_arr[offset+0];              //timestamp\n\t\t   local_output.num_azionamenti_PL_log=Telemetry_arr[offset+1];     //num_azionamenti_PL\n           local_output.PL_T2O_time_log=Number(Telemetry_arr[offset+2])/10;            //PL_T2O_time\n\t\t   local_output.PL_T2C_time_log=Number(Telemetry_arr[offset+3])/10;            //PL_T2C_time\n\t\t   local_output.PL_TC_time_log=Number(Telemetry_arr[offset+4])/10;             //PL_TC_time \n\t\t   local_output.PL_state_log=Number(Telemetry_arr[offset+5]);               //PL_state \n\t       local_output.PL_T2O_Average_log=Number(Telemetry_arr[offset+6])/10;         //PL_T2O_Average\n\t       local_output.PL_T2C_Average_log=Number(Telemetry_arr[offset+7])/10;         //PL_T2C_Average\n\t\t   local_output.PL_T2O_min_log=Number(Telemetry_arr[offset+8])/10;             //PL_T2O_min\n\t\t   local_output.PL_T2C_min_log=Number(Telemetry_arr[offset+9])/10;             //PL_T2C_min\n\t\t   local_output.PL_T2O_Max_log=Number(Telemetry_arr[offset+10])/10;             //PL_T2O_Max\n\t\t   local_output.PL_T2C_Max_log=Number(Telemetry_arr[offset+11])/10;             //PL_T2C_Max\n\t\t   //test = Telemetry_arr[offset+13].split(';');\n\t\t   //local_output.num_PL_OutOfRange=test[0];             \n\t\t   local_output.numPL_OutRange_log=Telemetry_arr[offset+12];     //Unsuccesfull_OperationPL        //Unsuccesfull_OperationPL\n\t\t   \n\t\t   local_output.T2CS_perc_log=T2CS_perc;\n           local_output.T2OS_perc_log=T2OS_perc;\n           local_output.PL_state_log=(\"00\" + local_output.PL_state_log).slice(-2);\n           if (local_output.PL_state_log === '00')\n           {\n                local_output.Deltaperc_T2O_avg_log = ((local_output.PL_T2O_Average_log - T2OS_ref)/T2OS_ref)*100;\n                local_output.Deltaperc_T2C_avg_log = ((local_output.PL_T2C_Average_log - T2CS_ref)/T2CS_ref)*100;\n           }\t\t              \n           \n           local_output.SM_state_log = local_output.PL_state_log.substr(0,1);\n           local_output.error_state_log = local_output.PL_state_log.substr(1,1);\n           \n           if(local_output.SM_state_log==='0')local_output.SM_log='SM_SB';\n           if(local_output.SM_state_log==='1')local_output.SM_log='SM_T2C';\n           if(local_output.SM_state_log==='2')local_output.SM_log='SM_TC';\n           if(local_output.SM_state_log==='3')local_output.SM_log='SM_T2O';\n           if(local_output.SM_state_log==='4')local_output.SM_log='SM_PL_4';\n           if(local_output.SM_state_log==='5')local_output.SM_log='SM_NO_DATA';\n           \n            if (local_output.error_state_log === '0') {local_output.error_type_log='NO ERROR';}\n            if (local_output.error_state_log === '1') {local_output.error_type_log='NO MATCH MODEL';}\n            if (local_output.error_state_log === '2') {local_output.error_type_log='T2O/T2C OVER RANGE';}\n            if (local_output.error_state_log === '3') {local_output.error_type_log='TC OVER RANGE';}\n            break;\n        \n    case T2CS.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(T2CS, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\n           local_output.T2C_reference=Number(Telemetry_arr[0])/10;         //T2C_reference\n\t\t   local_output.T2C_percent=Number(Telemetry_arr[1]);       //T2C_percent\n           msgType='POST_ATTRIBUTES_REQUEST';\n        break;\n    case T2OS.test(DecGtw_msg_String):\n    \t\t//console.log(\"telemetry\");\n    \t\tDecGtw_msg_String = DecGtw_msg_String.replace(T2OS, \"\").substr(0, DecGtw_msg_String.length - 1);\n    \t\tTelemetry_arr = DecGtw_msg_String.split(',');\n    \n           local_output.T2O_reference=Number(Telemetry_arr[0])/10;         //T2C_reference\n    \t   local_output.T2O_percent=Number(Telemetry_arr[1]);        //T2C_percent\n           msgType='POST_ATTRIBUTES_REQUEST';\n        break;  \n        default:\n        break;\n}\n\nreturn local_output;\n}\nreturn {msg: msg, metadata: newMetadata, msgType: msgType};"
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 610,
          "layoutY": 301
        },
        "type": "org.thingsboard.rule.engine.flow.TbRuleChainInputNode",
        "name": "Send mail",
        "debugMode": false,
        "configuration": {
          "ruleChainId": "4e791260-c354-11ed-a76d-9955dd563d2d"
        },
        "externalId": null
      },
      {
        "additionalInfo": {
          "description": null,
          "layoutX": 388,
          "layoutY": 478
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "DecPLmsg",
        "debugMode": true,
        "configuration": {
          "jsScript": "//Funzione di decodifica di tutti i messaggi embedded del dispositivo\n//var DecGtw_msg_String=\"telemetryH2O=2021-02-22 18:30:00,1255,1,1,2489,dummy,-57;\";\n//var DecGtw_msg_String=\"telemetry=17:58:30,17.4,39.1,1,3296,0.8,210,0.0,0.0,-18.2,11,0036,14076;\";\n//var EVB1:1;\n//\"MSG\":\"telemetryH2O=2021-02-22 18:30:00,1255,1,1,2489,dummy,-57;\"\n// telemetry_ceng=2021-09-28 10:17:00,6254,3,0319B2A1,-85,-5,20,7D3E,-74,12,33,0,-80;\n// telemetryPL=2022-02-01 09:12:11,11,10,23,5,0,3500,,,,485,0,-69;\n//var attr=0;\n\nvar T2OS_ref=metadata.shared_T2O_reference;\nvar T2CS_ref=metadata.shared_T2C_reference;\nvar T2OS_perc=metadata.shared_T2O_percent;\nvar T2CS_perc=metadata.shared_T2C_percent;\nvar offset_time = 5; //aggiunto come offset alla somma di tutti i tempi \nvar output_msg =msg;//output\nvar test_ct=msg.ct;\nvar  DecGtw_msg_String=msg.MSG;\nvar multimsg=DecGtw_msg_String.split(';');\nvar msg={};\nvar msg1={};\n//var msg2={};\n//var msg3={};\nvar newMetadata={};\nvar submsg={};\nvar tempmsg={};\nvar tempjsonmsg={};\nnewMetadata=metadata;\nnewMetadata.deviceName=metadata.deviceName;\n//newMetadata.deviceType=metadata.deviceType;\n//newMetadata.ts=metadata.ts;\nvar array=[];\nvar DATT1 = new RegExp(\"DATT:\");\nvar T2CS1 = new RegExp(\"T2CS:\");\nvar T2OS1 = new RegExp(\"T2OS:\");\nfor (var i = 0; i < (multimsg.length-1); i++) {\n    \n    //console.log(a[i]);\n//    newMetadata[i]=multimsg[i];\n//    if(i===0) newMetadata.array0=newMetadata[i];\n//    if(i==1) newMetadata.array1=newMetadata[i];\n//    submsg[i]=DecGTWmsg(multimsg[i]);\n\n        submsg[i]=DecGTWmsg(multimsg[i].replace(\"EXIT CMD\\n\",\"\"));\n        if(!( (DATT1.test(multimsg[i])) || (T2CS1.test(multimsg[i]))  || (T2OS1.test(multimsg[i])) ) ){\n        tempjsonmsg.ts=submsg[i].ts;tempjsonmsg.values=submsg[i];\n        tempmsg[i]=tempjsonmsg;\n        tempmsg[i]=JSON.stringify(tempmsg[i]);\n        array=array.concat(tempmsg[i]);\n        //}else newMetadata=submsg[i];\n}else \n{\n    //msg=submsg[i];\n    newMetadata.attribute=JSON.stringify(submsg[i]);\n}\n       \n} //chiude for\nmsg=JSON.parse('['+array+']');\n\n\n\n\nfunction DecGTWmsg(DecGtw_msg_String){\nvar local_output={};\nlocal_output.MSG=DecGtw_msg_String;\nlocal_output.ct=test_ct;\n\n\nvar telemetry = new RegExp(\"telemetry=\");\nvar telemetry_ceng = new RegExp(\"telemetry_ceng=\");\nvar telemetryPL = new RegExp(\"telemetryPL=\");\nvar DATT = new RegExp(\"DATT:\");\nvar ACLB = new RegExp(\"ACLB:\");\nvar AOTH = new RegExp(\"AOTH:\");\nvar T2CS = new RegExp(\"T2CS:\");\nvar T2OS = new RegExp(\"T2OS:\");\nvar LOGD = new RegExp(\"LOGD:\");\nvar Telemetry_arr; //telemetry splitted\nswitch (true) {\n    case telemetry.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetry, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]; local_output.temperature=Telemetry_arr[1];   local_output.humidity=Telemetry_arr[2]; \n       local_output.out_state=Telemetry_arr[3];\n\t\t   //local_output.Batt=Telemetry_arr[4];\n\t\t   local_output.Batt=Telemetry_arr[6];\n\t\t   local_output.mc=Telemetry_arr[7];\n       //local_output.current=Telemetry_arr[5];     local_output.power=Telemetry_arr[6];    local_output.ax=Telemetry_arr[7];\n       local_output.ay=Telemetry_arr[8];          local_output.az=Telemetry_arr[9];         \n       local_output.sc_pci=Telemetry_arr[10];local_output.sc_ecl=Telemetry_arr[11]; local_output.sc_rssi=Telemetry_arr[12];\n        break;\n    case telemetry_ceng.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetry_ceng, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]; \n\t\t   local_output.EARFCN=Telemetry_arr[1];   \n\t\t   local_output.EARFC_off=Telemetry_arr[2]; \n           local_output.Cell_ID=Telemetry_arr[3];\n\t\t   local_output.RSRP=Telemetry_arr[4];\n\t\t   local_output.RSRQ=Telemetry_arr[5];\n\t\t   local_output.Band=Telemetry_arr[6];\n\t\t   local_output.TAC=Telemetry_arr[7];\n           local_output.RE_RSRP=Telemetry_arr[8];          \n           local_output.SNR=Telemetry_arr[9];         \n           local_output.sc_pci=Telemetry_arr[10];\n           local_output.sc_ecl=Telemetry_arr[11]; \n           local_output.sc_rssi=Telemetry_arr[12];\n        break;     \n    case telemetryPL.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(telemetryPL, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\t\t   // console.log(Telemetry);\n\t\t\t  // console.log(\"len1 \"+ testtel);\n\t\t   local_output.timestamp=Telemetry_arr[0]+\"+0000\"; \n\t\t   local_output.ts=Date.parse(local_output.timestamp);\n\t\t   local_output.num_azionamenti_PL=Telemetry_arr[1];  //numero di azionamenti del PL (cicli time2close, time close e time2open) \n\t\t   local_output.T2Oc=Number(Telemetry_arr[2])/10;                // time to open in secondi\n           local_output.T2Cc=Number(Telemetry_arr[3])/10;                // time to close in secondi\n\t\t   local_output.TCc=Number(Telemetry_arr[4])/10;                 // time close in secondi\n\t\t   local_output.PL_state=Number(Telemetry_arr[5]);            // byte in cui è possibile inserire la\n\t\t   // segnalazione di un problema/allarme del sistema PL\n\t\t   local_output.PL_state=(\"00\" + local_output.PL_state).slice(-2)\n\n           local_output.SM_state = local_output.PL_state.substr(0,1);\n           if(local_output.SM_state==='0')local_output.SM='SM_SB';\n           if(local_output.SM_state==='1')local_output.SM='SM_T2C';\n           if(local_output.SM_state==='2')local_output.SM='SM_TC';\n           if(local_output.SM_state==='3')local_output.SM='SM_T2O';\n           if(local_output.SM_state==='4')local_output.SM='SM_PL_4';\n           if(local_output.SM_state==='5')local_output.SM='SM_NO_DATA';\n\n           local_output.error_state = local_output.PL_state.substr(1,1);\n\t\t   local_output.Batt=Telemetry_arr[6];\n\t\t   local_output.x_acc=Telemetry_arr[7];               // x_acc\n           local_output.y_acc=Telemetry_arr[8];              // y_acc\n           local_output.z_acc=Telemetry_arr[9];               // z_acc\n           local_output.sc_pci=Telemetry_arr[10];\n           local_output.sc_ecl=Telemetry_arr[11]; \n           local_output.sc_rssi=Telemetry_arr[12];\n           \n           local_output.operational_time = offset_time+local_output.T2Oc+local_output.T2Cc+local_output.TCc;\n            if (local_output.error_state === '0') {local_output.error_type='NO ERROR';}\n            if (local_output.error_state === '1') {local_output.error_type='NO MATCH MODEL';}\n            if (local_output.error_state === '2') {local_output.error_type='T2O/T2C OVER RANGE';}\n            if (local_output.error_state === '3') {local_output.error_type='TC OVER RANGE';}\n\n           var pi = Math.PI;\n           if (newMetadata.deviceName != 'CLR-PL_test'){\n               var rad = Math.atan(local_output.x_acc/local_output.y_acc);    //nel caso di staffa per PoC Nordcom\n               rad = Math.abs(rad);\n               var angle = rad * (180/pi);\n           }\n           else {\n               if(local_output.SM_state==='0') angle=0; //open\n               if(local_output.SM_state==='2') angle=90; //close\n               //var rad = Math.atan(local_output.y_acc/local_output.x_acc);    //nel caso di staffa lab\n           }\n\n           local_output.angle=angle;\n\t\t   local_output.T2CS_perc=T2CS_perc;\n           local_output.T2OS_perc=T2OS_perc;\n            if (local_output.PL_state === '00'){\n                \n                local_output.Deltaperc_T2O = ((local_output.T2Oc - T2OS_ref)/T2OS_ref)*100;\n                local_output.Deltaperc_T2C = ((local_output.T2Cc - T2CS_ref)/T2CS_ref)*100;\n\n            }\n           \n        break;    \n    case DATT.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(DATT, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\n           local_output.model=Telemetry_arr[0];         //modello\n\t\t   local_output.fw=Telemetry_arr[1];            //versione fw\n           local_output.hw=Telemetry_arr[2];            //versione hw\n\t\t   local_output.eeprom=Telemetry_arr[3];        //versione eeprom\n\t\t   local_output.OTAver=Telemetry_arr[4];        //versione fw OTA  \n\t\t   local_output.PL_Calib=Telemetry_arr[5];      // byte in cui è possibile inserire la segnalazione di un problema/allarme del sistema PL \n\t\t   local_output.Xc=Telemetry_arr[6];            //Xc\n\t\t   local_output.Yc=Telemetry_arr[7];            //Yc\n           local_output.Zc=Telemetry_arr[8];            //Zc\n           local_output.Ao_axes=Telemetry_arr[9];       //asse operativo\n           local_output.AoMax=Telemetry_arr[10];        //valore max asse operativo\n           local_output.AoTh=Telemetry_arr[11];         //soglia AoTh\n           local_output.AoTh1=Telemetry_arr[12];        //soglia AoTh1\n           local_output.T2Oc_att=Number(Telemetry_arr[13])/10;     //time to open calib\n           local_output.T2Cc_att=Number(Telemetry_arr[14])/10;     //time to close calib\n//           local_output.TCc_att=Telemetry_arr[15];      //time close calib\n           var d = new Date();\n            \n            //da sistemare: aggiunto +1 in d.getHours() per impostare orario in locale roma\n           \n           var datestring =  d.getFullYear() + \"-\" + (\"0\"+(d.getMonth()+1)).slice(-2) + \"-\" + (\"0\" + d.getDate()).slice(-2) + \" \" + (\"0\" + (d.getHours())).slice(-2) + \":\" + (\"0\" + d.getMinutes()).slice(-2) + \":\" + (\"0\" + d.getSeconds()).slice(-2);\n           //console.log(dateTime);\n           \n           local_output.timestamp_Calib=datestring;\n   \n           //var pi1 = Math.PI;\n//           var rad1 = Math.atan(local_output.Yc/local_output.Xc);  //nel caso di PL Matera\n           var rad1 = Math.atan(local_output.Xc/local_output.Yc);    //nel caso di staffa per PoC Nordcom\n           rad1 = Math.abs(rad1);\n           var angle1 = rad1 * (180/Math.PI);\n           local_output.angle=angle1;\n           //attr=1;\n           msgType='POST_ATTRIBUTES_REQUEST';\n        break; \n    case ACLB.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(ACLB, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(';');\n\n           local_output.Calib_state=Telemetry_arr[0];         //Calib_state\n\n        break;     \n    case AOTH.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(AOTH, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\n           local_output.Aoth_Perc=Telemetry_arr[0];         //Aoth_Perc\n\t\t   local_output.Aoth1_Perc=Telemetry_arr[1];        //Aoth1_Perc\n           local_output.Aoth1=Telemetry_arr[2];             //Aoth1\n\t\t   local_output.HG_T2C_IRQ=Telemetry_arr[3];        //HG_T2C_IRQ\n\t\t   local_output.AF2Ao_HG_switch=Telemetry_arr[4];   //AF_2_Ao_HG_switch \n\t\t   local_output.Aoth=Telemetry_arr[5];              //Aoth \n\t       local_output.HG_T2O_IRQ=Telemetry_arr[6];        //HG_T2O_IRQ\n\t\t   local_output.Ao2AF_HG_switch=Telemetry_arr[7];   //Ao_2_AF_HG_switch\n\t\t   local_output.Afth=Telemetry_arr[8];              //Afth\n\t\t   test = Telemetry_arr[9].split(';');\n           local_output.nr_PL_TotNoModel=test[0];               //num_PL_TotNoModel\n\n        break; \n    case LOGD.test(DecGtw_msg_String):\n\t\t\t\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(LOGD, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n           offset = 1; //per non considerare il primo valore che rappresenta l'indice di log\n           //var dateTime = new Date(Telemetry_arr[offset+0]*1000);\n//           newMetadata.ts=Telemetry_arr[offset+0];\n           local_output.ts=(Telemetry_arr[offset+0]*1000);//+3600000;\n           //var m = new Date(Telemetry_arr[offset+0]*1000);\n           var m = new Date(local_output.ts);\n            var dateString =\n                m.getUTCFullYear() + \"-\" +\n                (\"0\" + (m.getUTCMonth()+1)).slice(-2) + \"-\" +\n                (\"0\" + m.getUTCDate()).slice(-2) + \" \" +\n                (\"0\" + (m.getUTCHours())).slice(-2) + \":\" +\n                (\"0\" + m.getUTCMinutes()).slice(-2) + \":\" +\n                (\"0\" + m.getUTCSeconds()).slice(-2);\n           \n//           var formatted = dateTime.toGMTString();\n           //var formatted = dateTime.toISOString();\n           //moment(dateTime).format(\"YYYY-MM-DDTHH:mm:ssZZ\");\n           local_output.timestamp_log=dateString;              //timestamp\n//           local_output.timestamp=Telemetry_arr[offset+0];              //timestamp\n\t\t   local_output.num_azionamenti_PL_log=Telemetry_arr[offset+1];     //num_azionamenti_PL\n           local_output.PL_T2O_time_log=Number(Telemetry_arr[offset+2])/10;            //PL_T2O_time\n\t\t   local_output.PL_T2C_time_log=Number(Telemetry_arr[offset+3])/10;            //PL_T2C_time\n\t\t   local_output.PL_TC_time_log=Number(Telemetry_arr[offset+4])/10;             //PL_TC_time \n\t\t   local_output.PL_state_log=Number(Telemetry_arr[offset+5]);               //PL_state \n\t       local_output.PL_T2O_Average_log=Number(Telemetry_arr[offset+6])/10;         //PL_T2O_Average\n\t       local_output.PL_T2C_Average_log=Number(Telemetry_arr[offset+7])/10;         //PL_T2C_Average\n\t       \n\t\t   local_output.PL_T2O_min_log=Number(Telemetry_arr[offset+8])/10;             //PL_T2O_min\n\t\t   local_output.PL_T2C_min_log=Number(Telemetry_arr[offset+9])/10;             //PL_T2C_min\n\t\t   local_output.PL_T2O_Max_log=Number(Telemetry_arr[offset+10])/10;             //PL_T2O_Max\n\t\t   local_output.PL_T2C_Max_log=Number(Telemetry_arr[offset+11])/10;             //PL_T2C_Max\n\t\t   //test = Telemetry_arr[offset+13].split(';');\n\t\t   //local_output.num_PL_OutOfRange=test[0];  \n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t   \n\t\t   //commentate il 280323 dopo aggiornamento fw per inserire in struttura al \n\t\t   //posto di OutofRange il valore del contatore nomodel\n//\t\t   local_output.numPL_OutRange_log=Telemetry_arr[offset+12];     //Unsuccesfull_Misure        \n//\t\t   local_output.num_PL_TotNoModel_log=Telemetry_arr[offset+13]; //NoModel_MisurePL\n\t\t   \n//\t\t   local_output.numPL_OutRange_log=Telemetry_arr[offset+12];     //Unsuccesfull_Misure        \n\t\t   local_output.num_PL_TotNoModel_log=Telemetry_arr[offset+12]; //NoModel_MisurePL\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t   \n\n\t\t   local_output.T2CS_perc_log=T2CS_perc;\n           local_output.T2OS_perc_log=T2OS_perc;\n           local_output.PL_state_log=(\"00\" + local_output.PL_state_log).slice(-2);\n           \n           //Ricalcolo della statistica in termini %, a regime i tempi possono sparire\n                local_output.Deltaperc_T2O_avg_log = ((local_output.PL_T2O_Average_log - T2OS_ref)/T2OS_ref)*100;\n                local_output.Deltaperc_T2C_avg_log = ((local_output.PL_T2C_Average_log - T2CS_ref)/T2CS_ref)*100;\n                local_output.Deltaperc_T2O_min_log = ((local_output.PL_T2O_min_log - T2OS_ref)/T2OS_ref)*100;\n                local_output.Deltaperc_T2C_min_log = ((local_output.PL_T2C_min_log - T2CS_ref)/T2CS_ref)*100;\n                local_output.Deltaperc_T2O_Max_log = ((local_output.PL_T2O_Max_log - T2OS_ref)/T2OS_ref)*100;\n                local_output.Deltaperc_T2C_Max_log = ((local_output.PL_T2C_Max_log - T2CS_ref)/T2CS_ref)*100;\n                \n           \n           //Variabili da plottare nel grafico settimanale degli scostamenti, la media se schedulato\n           if (local_output.PL_state_log === '00')//Log schedulato\n           {\n                local_output.Deltaperc_T2O_Plot = local_output.Deltaperc_T2O_avg_log;\n                local_output.Deltaperc_T2C_Plot = local_output.Deltaperc_T2C_avg_log;\n                \n               \n           }else if(local_output.PL_state_log === '02')//OverRange da fascia PM\t \n           {\n               local_output.Deltaperc_T2O_Plot = ((local_output.PL_T2O_time_log - T2OS_ref)/T2OS_ref)*100;\n               local_output.Deltaperc_T2C_Plot = ((local_output.PL_T2C_time_log - T2CS_ref)/T2CS_ref)*100; \n           }\n           \n           local_output.SM_state_log = local_output.PL_state_log.substr(0,1);\n           local_output.error_state_log = local_output.PL_state_log.substr(1,1);\n           \n           if(local_output.SM_state_log==='0')local_output.SM_log='SM_SB';\n           if(local_output.SM_state_log==='1')local_output.SM_log='SM_T2C';\n           if(local_output.SM_state_log==='2')local_output.SM_log='SM_TC';\n           if(local_output.SM_state_log==='3')local_output.SM_log='SM_T2O';\n           if(local_output.SM_state_log==='4')local_output.SM_log='SM_PL_4';\n           if(local_output.SM_state_log==='5')local_output.SM_log='SM_NO_DATA';\n           \n            if (local_output.error_state_log === '0') {local_output.error_type_log='NO ERROR';}\n            if (local_output.error_state_log === '1') {local_output.error_type_log='NO MATCH MODEL';}\n            if (local_output.error_state_log === '2') {local_output.error_type_log='T2O/T2C OVER RANGE';}\n            if (local_output.error_state_log === '3') {local_output.error_type_log='TC OVER RANGE';}\n            break;\n        \n    case T2CS.test(DecGtw_msg_String):\n\t\t\t//console.log(\"telemetry\");\n\t\t\tDecGtw_msg_String = DecGtw_msg_String.replace(T2CS, \"\").substr(0, DecGtw_msg_String.length - 1);\n\t\t\tTelemetry_arr = DecGtw_msg_String.split(',');\n\n           local_output.T2C_reference=Number(Telemetry_arr[0])/10;         //T2C_reference\n\t\t   local_output.T2C_percent=Number(Telemetry_arr[1]);       //T2C_percent\n           msgType='POST_ATTRIBUTES_REQUEST';\n        break;\n    case T2OS.test(DecGtw_msg_String):\n    \t\t//console.log(\"telemetry\");\n    \t\tDecGtw_msg_String = DecGtw_msg_String.replace(T2OS, \"\").substr(0, DecGtw_msg_String.length - 1);\n    \t\tTelemetry_arr = DecGtw_msg_String.split(',');\n    \n           local_output.T2O_reference=Number(Telemetry_arr[0])/10;         //T2C_reference\n    \t   local_output.T2O_percent=Number(Telemetry_arr[1]);        //T2C_percent\n           msgType='POST_ATTRIBUTES_REQUEST';\n        break;  \n        default:\n        break;\n}\n\nreturn local_output;\n}\nreturn {msg: msg, metadata: newMetadata, msgType: msgType};"
        },
        "externalId": null
      }
    ],
    "connections": [
      {
        "fromIndex": 0,
        "toIndex": 2,
        "type": "Success"
      },
      {
        "fromIndex": 1,
        "toIndex": 2,
        "type": "Post telemetry"
      },
      {
        "fromIndex": 1,
        "toIndex": 6,
        "type": "Post attributes"
      },
      {
        "fromIndex": 2,
        "toIndex": 7,
        "type": "Success"
      },
      {
        "fromIndex": 4,
        "toIndex": 5,
        "type": "Success"
      },
      {
        "fromIndex": 5,
        "toIndex": 1,
        "type": "Success"
      },
      {
        "fromIndex": 6,
        "toIndex": 0,
        "type": "Success"
      },
      {
        "fromIndex": 8,
        "toIndex": 12,
        "type": "Success"
      },
      {
        "fromIndex": 8,
        "toIndex": 13,
        "type": "Success"
      },
      {
        "fromIndex": 8,
        "toIndex": 15,
        "type": "Success"
      },
      {
        "fromIndex": 9,
        "toIndex": 8,
        "type": "Success"
      },
      {
        "fromIndex": 12,
        "toIndex": 11,
        "type": "Success"
      },
      {
        "fromIndex": 13,
        "toIndex": 10,
        "type": "Success"
      }
    ],
    "ruleChainConnections": null
  }
}